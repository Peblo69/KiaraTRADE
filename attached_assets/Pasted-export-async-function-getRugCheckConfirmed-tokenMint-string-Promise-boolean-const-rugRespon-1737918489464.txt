export async function getRugCheckConfirmed(tokenMint: string): Promise<boolean> {
  const rugResponse = await axios.get<RugResponseExtended>("https://api.rugcheck.xyz/v1/tokens/" + tokenMint + "/report", {
    timeout: config.tx.get_timeout,
  });

  if (!rugResponse.data) return false;

  if (config.rug_check.verbose_log && config.rug_check.verbose_log === true) {
    console.log(rugResponse.data);
  }

  // Extract information
  const tokenReport: RugResponseExtended = rugResponse.data;
  const tokenCreator = tokenReport.creator ? tokenReport.creator : tokenMint;
  const mintAuthority = tokenReport.token.mintAuthority;
  const freezeAuthority = tokenReport.token.freezeAuthority;
  const isInitialized = tokenReport.token.isInitialized;
  const supply = tokenReport.token.supply;
  const decimals = tokenReport.token.decimals;
  const tokenName = tokenReport.tokenMeta.name;
  const tokenSymbol = tokenReport.tokenMeta.symbol;
  const tokenMutable = tokenReport.tokenMeta.mutable;
  let topHolders = tokenReport.topHolders;
  const marketsLength = tokenReport.markets ? tokenReport.markets.length : 0;
  const totalLPProviders = tokenReport.totalLPProviders;
  const totalMarketLiquidity = tokenReport.totalMarketLiquidity;
  const isRugged = tokenReport.rugged;
  const rugScore = tokenReport.score;
  const rugRisks = tokenReport.risks
    ? tokenReport.risks
    : [
        {
          name: "Good",
          value: "",
          description: "",
          score: 0,
          level: "good",
        },
      ];

  // Update topHolders if liquidity pools are excluded
  if (config.rug_check.exclude_lp_from_topholders) {
    // Local types
    type Market = {
      liquidityA?: string;
      liquidityB?: string;
    };

    const markets: Market[] | undefined = tokenReport.markets;
    if (markets) {
      // Safely extract liquidity addresses from markets
      const liquidityAddresses: string[] = (markets ?? [])
        .flatMap((market) => [market.liquidityA, market.liquidityB])
        .filter((address): address is string => !!address);

      // Filter out topHolders that match any of the liquidity addresses
      topHolders = topHolders.filter((holder) => !liquidityAddresses.includes(holder.address));
    }
  }

  // Get config
  const rugCheckConfig = config.rug_check;
  const rugCheckLegacy = rugCheckConfig.legacy_not_allowed;

  // Set conditions
  const conditions = [
    {
      check: !rugCheckConfig.allow_mint_authority && mintAuthority !== null,
      message: "ðŸš« Mint authority should be null",
    },
    {
      check: !rugCheckConfig.allow_not_initialized && !isInitialized,
      message: "ðŸš« Token is not initialized",
    },
    {
      check: !rugCheckConfig.allow_freeze_authority && freezeAuthority !== null,
      message: "ðŸš« Freeze authority should be null",
    },
    {
      check: !rugCheckConfig.allow_mutable && tokenMutable !== false,
      message: "ðŸš« Mutable should be false",
    },
    {
      check: !rugCheckConfig.allow_insider_topholders && topHolders.some((holder) => holder.insider),
      message: "ðŸš« Insider accounts should not be part of the top holders",
    },
    {
      check: topHolders.some((holder) => holder.pct > rugCheckConfig.max_alowed_pct_topholders),
      message: "ðŸš« An individual top holder cannot hold more than the allowed percentage of the total supply",
    },
    {
      check: totalLPProviders < rugCheckConfig.min_total_lp_providers,
      message: "ðŸš« Not enough LP Providers.",
    },
    {
      check: marketsLength < rugCheckConfig.min_total_markets,
      message: "ðŸš« Not enough Markets.",
    },
    {
      check: totalMarketLiquidity < rugCheckConfig.min_total_market_Liquidity,
      message: "ðŸš« Not enough Market Liquidity.",
    },
    {
      check: !rugCheckConfig.allow_rugged && isRugged,
      message: "ðŸš« Token is rugged",
    },
    {
      check: rugCheckConfig.block_symbols.includes(tokenSymbol),
      message: "ðŸš« Symbol is blocked",
    },
    {
      check: rugCheckConfig.block_names.includes(tokenName),
      message: "ðŸš« Name is blocked",
    },
    {
      check: rugScore > rugCheckConfig.max_score && rugCheckConfig.max_score !== 0,
      message: "ðŸš« Rug score too high.",
    },
    {
      check: rugRisks.some((risk) => rugCheckLegacy.includes(risk.name)),
      message: "ðŸš« Token has legacy risks that are not allowed.",
    },
  ];

  // If tracking duplicate tokens is enabled
  if (config.rug_check.block_returning_token_names || config.rug_check.block_returning_token_creators) {
    // Get duplicates based on token mint and creator
    const duplicate = await selectTokenByNameAndCreator(tokenName, tokenCreator);

    // Verify if duplicate token or creator was returned
    if (duplicate.length !== 0) {
      if (config.rug_check.block_returning_token_names && duplicate.some((token) => token.name === tokenName)) {
        console.log("ðŸš« Token with this name was already created");
        return false;
      }
      if (config.rug_check.block_returning_token_creators && duplicate.some((token) => token.creator === tokenCreator)) {
        console.log("ðŸš« Token from this creator was already created");
        return false;
      }
    }
  }

  // Create new token record
  const newToken: NewTokenRecord = {
    time: Date.now(),
    mint: tokenMint,
    name: tokenName,
    creator: tokenCreator,
  };
  await insertNewToken(newToken).catch((err) => {
    if (config.rug_check.block_returning_token_names || config.rug_check.block_returning_token_creators) {
      console.log("â›” Unable to store new token for tracking duplicate tokens: " + err);
    }
  });

  // Validate conditions
  for (const condition of conditions) {
    if (condition.check) {
      console.log(condition.message);
      return false;
    }
  }

  return true;
}
