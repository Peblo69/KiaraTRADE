1. Install Required Libraries
You'll need the Solana web3.js library to interact with the Solana blockchain and Phantom Wallet. Run the following command:

bash
Copy
Edit
npm install @solana/web3.js
You can also install additional libraries like @solana/wallet-adapter-react if you're using React.

2. Check for Phantom Wallet Availability
Phantom Wallet injects a global solana object into the browser. You can use this to check if the wallet is installed.

Here’s the basic code to detect Phantom:

javascript
Copy
Edit
if (window.solana && window.solana.isPhantom) {
  console.log('Phantom Wallet is available!');
} else {
  console.log('Please install Phantom Wallet.');
}
3. Request Connection to Phantom
You need to request the user to connect their Phantom Wallet. This allows the app to access their public key.

javascript
Copy
Edit
const connectPhantomWallet = async () => {
  if (window.solana && window.solana.isPhantom) {
    try {
      const resp = await window.solana.connect();
      console.log('Connected with public key:', resp.publicKey.toString());
    } catch (err) {
      console.error('Error connecting to Phantom Wallet:', err);
    }
  } else {
    alert('Please install Phantom Wallet to connect.');
  }
};
Add this function to a button for users to connect their wallet.

4. Display Wallet Address
Once connected, you can display the user's wallet address or use it in your application.

javascript
Copy
Edit
const walletAddress = window.solana?.publicKey?.toString();
if (walletAddress) {
  console.log('User wallet address:', walletAddress);
}
5. Disconnect Phantom Wallet
To allow users to disconnect their wallet, use the following code:

javascript
Copy
Edit
const disconnectPhantomWallet = async () => {
  if (window.solana && window.solana.isPhantom) {
    await window.solana.disconnect();
    console.log('Disconnected from Phantom Wallet');
  }
};
6. Make Blockchain Transactions
To enable sending SOL, interacting with programs, or trading tokens, use the @solana/web3.js library. Here’s an example of sending SOL:

javascript
Copy
Edit
import { Connection, PublicKey, Transaction, SystemProgram } from '@solana/web3.js';

const sendSol = async (recipientAddress, amount) => {
  if (!window.solana || !window.solana.isPhantom) return;

  const connection = new Connection('https://api.mainnet-beta.solana.com');
  const sender = window.solana.publicKey;

  const transaction = new Transaction().add(
    SystemProgram.transfer({
      fromPubkey: sender,
      toPubkey: new PublicKey(recipientAddress),
      lamports: amount * 1e9, // Convert SOL to lamports
    })
  );

  transaction.feePayer = sender;
  const { blockhash } = await connection.getRecentBlockhash();
  transaction.recentBlockhash = blockhash;

  const signedTransaction = await window.solana.signTransaction(transaction);
  const txId = await connection.sendRawTransaction(signedTransaction.serialize());
  console.log('Transaction ID:', txId);
};
7. Use Wallet Adapter (Optional)
If you're building a larger project with multiple wallet options, consider using the Solana Wallet Adapter. Install:

bash
Copy
Edit
npm install @solana/wallet-adapter-react @solana/wallet-adapter-wallets
This package simplifies wallet integration for React apps and supports multiple wallets.

8. Secure Backend Integration
For backend interactions:

Verify signed messages to confirm the user owns the wallet.
Use their public key to identify and link accounts securely.
9. Test and Deploy
Test the connection on Phantom Wallet (Chrome/Brave).
Use Solana’s devnet environment for testing transactions.
Deploy your app to ensure Phantom Wallet functions as expected in production.
Example React Component
Here’s an example of a button to connect Phantom Wallet in React:

javascript
Copy
Edit
import React, { useState } from 'react';

const ConnectWallet = () => {
  const [walletAddress, setWalletAddress] = useState(null);

  const connectWallet = async () => {
    if (window.solana && window.solana.isPhantom) {
      try {
        const resp = await window.solana.connect();
        setWalletAddress(resp.publicKey.toString());
        console.log('Connected with public key:', resp.publicKey.toString());
      } catch (err) {
        console.error('Error connecting to Phantom Wallet:', err);
      }
    } else {
      alert('Please install Phantom Wallet!');
    }
  };

  return (
    <div>
      {walletAddress ? (
        <p>Connected: {walletAddress}</p>
      ) : (
        <button onClick={connectWallet}>Connect Phantom Wallet</button>
      )}
    </div>
  );
};

export default ConnectWallet;