First, let's modify your TokenPage to show trades:
TypeScript

import { useEffect, useState } from 'react';
import { wsManager } from '@/lib/services/websocket';
import { Card } from "@/components/ui/card";

interface Trade {
    price: number;
    amount: number;
    timestamp: number;
    type: 'buy' | 'sell';
}

export default function TokenPage({ mint }: Props) {
    const [trades, setTrades] = useState<Trade[]>([]);
    const [lastPrice, setLastPrice] = useState<number | null>(null);

    useEffect(() => {
        // Listen for trades from PumpPortal
        wsManager.on('trade', (data) => {
            if (data.mint === mint) {
                console.log('üî• NEW TRADE:', data);
                
                // Add new trade to the list
                setTrades(prevTrades => {
                    const newTrades = [{
                        price: data.price,
                        amount: data.amount,
                        timestamp: Date.now(),
                        type: data.type // 'buy' or 'sell'
                    }, ...prevTrades].slice(0, 50); // Keep last 50 trades
                    
                    // Update last price
                    setLastPrice(data.price);
                    
                    return newTrades;
                });
            }
        });

        return () => {
            wsManager.off('trade');
        };
    }, [mint]);

    return (
        <div className="p-6">
            <Card className="p-6 mb-4">
                <h2 className="text-2xl font-bold mb-4">Live Trades</h2>
                {lastPrice && (
                    <div className="text-3xl font-bold mb-6">
                        ${lastPrice.toFixed(6)}
                    </div>
                )}
            </Card>

            <Card className="p-6">
                <div className="space-y-2">
                    {trades.map((trade, i) => (
                        <div 
                            key={i} 
                            className={`p-3 rounded flex justify-between items-center ${
                                trade.type === 'buy' ? 'bg-green-500/10' : 'bg-red-500/10'
                            }`}
                        >
                            <div>
                                <span className={trade.type === 'buy' ? 'text-green-400' : 'text-red-400'}>
                                    {trade.type.toUpperCase()}
                                </span>
                            </div>
                            <div>
                                <div className="text-sm opacity-75">
                                    Amount: {trade.amount}
                                </div>
                                <div className="font-bold">
                                    ${trade.price.toFixed(6)}
                                </div>
                            </div>
                            <div className="text-sm opacity-50">
                                {new Date(trade.timestamp).toLocaleTimeString()}
                            </div>
                        </div>
                    ))}
                </div>
            </Card>
        </div>
    );
}

This will:

    Show live trades as they come in üîÑ
    Color code buys (green) and sells (red) üé®
    Show price, amount, and time for each trade ‚è∞
    Keep the last 50 trades in memory üìä
