Why Real-Time Buy/Sell Prices Aren't Accurate
Data Source Complexity:

PumpPortal and Helius APIs provide transaction data, but they may not offer real-time bonding curve values (vSolInBondingCurve, vTokensInBondingCurve) for every trade.
Without accurate and synchronized data from liquidity pools, calculations like price per token (vSol / vTokens) can lag or produce inaccuracies.
Delayed or Missing Updates:

The WebSocket logic for processing trades does not ensure that bonding curve values (critical for determining the real-time price) are refreshed immediately after every transaction.
If the bonding curve values are outdated, calculations for price and market cap will also be outdated.
Simplistic Logic for Buy/Sell Detection:

Current code relies on changes in SOL and token balances to detect whether a trade is a buy or a sell.
This logic can fail in complex scenarios like swaps or liquidity provision where balance changes don't directly correspond to buys/sells.
Incorrect Calculation Flow:

The AI agentâ€™s suggestion to calculate prices using:
text
Copy
Edit
Price per token = vSol / vTokens
Market cap = marketCapSol * solPriceUsd
is correct in theory, but if the bonding curve values (vSol, vTokens) are not updated per trade, the results are inaccurate.
WebSocket Handling Issues:

If WebSocket messages are not processed efficiently or if duplicate/missing subscriptions occur, real-time data for wallets and trades might not be synchronized.
The onAccountChange logic may fail to capture precise changes in token balances, leading to partial trade details.
Trade Volume and Impact Calculations Are Missing:

The code lacks proper handling of trade volume and its impact on the bonding curve (i.e., how the price changes after each trade).
Without adjusting prices dynamically based on volume and liquidity, real-time tracking won't reflect actual market behavior.
Steps to Fix Real-Time Buy/Sell Price Tracking
1. Ensure Real-Time Bonding Curve Updates
Fetch vSolInBondingCurve and vTokensInBondingCurve immediately after every transaction using the Helius or PumpPortal APIs.
Integrate bonding curve updates into the WebSocket onAccountChange handler.
Code Example:

typescript
Copy
Edit
async function updateBondingCurveValues(tokenAddress: string) {
    const response = await fetch(`https://api.pumpportal.com/v1/token/${tokenAddress}`);
    const { vSolInBondingCurve, vTokensInBondingCurve } = await response.json();
    return { vSolInBondingCurve, vTokensInBondingCurve };
}

async function processTransaction(signature: string, tokenAddress: string) {
    const { vSolInBondingCurve, vTokensInBondingCurve } = await updateBondingCurveValues(tokenAddress);
    const pricePerToken = vSolInBondingCurve / vTokensInBondingCurve;

    const solPriceUsd = usePumpPortalStore.getState().solPrice || 0;
    const priceUsdPerToken = pricePerToken * solPriceUsd;

    // Store price in the unified token store
    useUnifiedTokenStore.getState().updateToken(tokenAddress, {
        price: pricePerToken,
        priceUsd: priceUsdPerToken,
    });

    console.log(`Updated price for ${tokenAddress}: ${pricePerToken} SOL, ${priceUsdPerToken} USD`);
}
2. Improve Buy/Sell Detection Logic
Instead of relying solely on balance changes, validate trade details using:
Trade volume (calculated as solAmount * price).
Buyer/Seller wallets extracted from the transaction.
Improved Buy/Sell Detection:

typescript
Copy
Edit
function detectTradeType(preBalanceSol, postBalanceSol, preBalanceToken, postBalanceToken) {
    const solChange = postBalanceSol - preBalanceSol;
    const tokenChange = postBalanceToken - preBalanceToken;

    if (solChange < 0 && tokenChange > 0) return 'buy';
    if (solChange > 0 && tokenChange < 0) return 'sell';

    return null;
}
3. Add Real-Time Price Impact Logic
Adjust token prices dynamically based on trade volume and liquidity to reflect the impact of each trade on the bonding curve.
Price Impact Calculation:

typescript
Copy
Edit
const IMPACT_FACTOR = 0.005; // Adjust based on trading rules

function calculatePriceImpact(tradeVolume, liquidity, currentPrice) {
    const impact = Math.min((tradeVolume / liquidity) * IMPACT_FACTOR, 0.01);
    return currentPrice * (1 + impact);
}
4. Synchronize Data Across WebSocket Connections
Ensure unified-websocket.ts, helius-websocket.ts, and pump-portal-websocket.ts are synchronized to avoid stale data.
WebSocket Synchronization:

typescript
Copy
Edit
// Ensure all tokens are subscribed after WebSocket reconnection
unifiedWebSocket.subscribeToTokens(
    useUnifiedTokenStore.getState().tokens.map(t => t.address)
);
5. Refactor Unified Store to Normalize Data
Store trade history, bonding curve values, and real-time prices in the unified token store for consistency.
Unified Token Store Enhancements:

typescript
Copy
Edit
addTrade: (tokenAddress, trade) => {
    set((state) => ({
        trades: {
            ...state.trades,
            [tokenAddress]: [trade, ...(state.trades[tokenAddress] || [])].slice(0, 100),
        },
        bondingCurve: {
            ...state.bondingCurve,
            [tokenAddress]: trade.newBondingCurve, // Update bonding curve values
        },
    }));
};
Conclusion
The real-time buy/sell price tracking issue stems from outdated bonding curve values, simplistic buy/sell detection, and lack of price impact adjustments. By implementing dynamic bonding curve updates, improving trade detection logic, and adjusting prices based on trade volume and liquidity, your platform can achieve accurate real-time tracking.