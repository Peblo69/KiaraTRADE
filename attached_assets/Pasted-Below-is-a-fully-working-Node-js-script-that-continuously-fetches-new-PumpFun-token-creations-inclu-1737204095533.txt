Below is a fully working Node.js script that continuously fetches new PumpFun token creations (including metadata) in real time from Bitquery. Just copy this into a file (e.g. index.js), install graphql-ws, set your Bitquery API key, and run it on Replit or any Node environment. You’ll see newly created tokens every few seconds if PumpFun is actively minting.

1. Create index.js with the Following Code
js
Copy
Edit
// index.js
import { createClient } from 'graphql-ws';

// Put your Bitquery API key here
const BITQUERY_API_KEY = 'BQYSaASLeyNPxRf38DGgENQ1mVHxNypq';  // <-- Replace with your real key
// Bitquery's subscription WebSocket endpoint
const BITQUERY_WSS_URL = 'wss://graphql.bitquery.io';

// This subscription tracks newly created PumpFun tokens
// by listening for the "create" method on PumpFun's program address.
const SUBSCRIPTION_QUERY = `
subscription getNewlyCreatedPumpFunTokens {
  Solana {
    TokenSupplyUpdates(
      where: {
        Instruction: {
          Program: {
            Address: { is: "6EF8rrecthR5Dkzon8Nwu78hRvfCKubJ14M5uBEwF6P" },
            Method: { is: "create" }
          }
        }
      }
    ) {
      TokenSupplyUpdate {
        Amount
        PostBalance
        Currency {
          MintAddress
          Name
          Symbol
          Uri
          Decimals
          Fungible
          TokenStandard
        }
      }
    }
  }
}
`;

function main() {
  // Create a GraphQL WebSocket client
  const client = createClient({
    url: BITQUERY_WSS_URL,
    connectionParams: {
      headers: {
        'X-API-KEY': BITQUERY_API_KEY
      }
    }
  });

  // Subscribe to newly created tokens
  client.subscribe(
    { query: SUBSCRIPTION_QUERY },
    {
      next: (data) => {
        // Fires every time a NEW token is created on PumpFun
        const updates = data?.data?.Solana?.TokenSupplyUpdates || [];
        updates.forEach((item) => {
          const { Amount, PostBalance, Currency } = item.TokenSupplyUpdate;
          console.log('=== New PumpFun Token Detected! ===');
          console.log('MintAddress:', Currency.MintAddress);
          console.log('Name:', Currency.Name);
          console.log('Symbol:', Currency.Symbol);
          console.log('Decimals:', Currency.Decimals);
          console.log('Fungible:', Currency.Fungible);
          console.log('TokenStandard:', Currency.TokenStandard);
          console.log('Initial Supply (PostBalance):', PostBalance);
          console.log('Creation Amount (tx increment):', Amount);
          console.log('URI (if any):', Currency.Uri);
          console.log('====================================\n');
        });
      },
      error: (err) => {
        console.error('Subscription error:', err);
      },
      complete: () => {
        console.log('Subscription completed');
      }
    }
  );
}

main();
How It Works
Uses graphql-ws to connect to wss://graphql.bitquery.io.
Sends the subscription query that filters for Method: "create" calls on PumpFun’s program (Address: "6EF8rrecthR5Dkzon8Nwu78hRvfCKubJ14M5uBEwF6P").
Logs each newly created token in real time (about every 1–5 seconds if PumpFun is busy).
2. Install Dependencies
If you’re on Replit with Node.js, open the Shell and run:

bash
Copy
Edit
npm install graphql-ws
(If you get an error about ESM imports, see Note #1 below.)

3. Run the Script
bash
Copy
Edit
node index.js
You should start seeing output like this whenever a new token is created on PumpFun:

vbnet
Copy
Edit
=== New PumpFun Token Detected! ===
MintAddress: 3nWpA...pump
Name: MyNewToken
Symbol: MNT
Decimals: 9
Fungible: true
TokenStandard: SPL
Initial Supply (PostBalance): 1000000000
Creation Amount (tx increment): 1000000000
URI (if any): https://metadata.example.com
====================================
4. Common Issues & Tips
ESM vs. CommonJS

If you see an error like “Cannot use import statement outside a module,” then either:
Rename file to .mjs, or
Use type: "module" in package.json, or
Switch to CommonJS syntax with const { createClient } = require('graphql-ws');
No Output?

If nobody is creating tokens on PumpFun at that moment, you might not see new tokens for a while. (On busy days, you’ll see them every few seconds.)
Confirm your X-API-KEY is correct and not rate-limited.
Keep the Script Running

If you want a real-time feed 24/7, keep the script running in the background. On Replit, you might need to use the Always-On or similar feature so it doesn’t go to sleep.
Secure Your API Key

Don’t push this to a public GitHub with your real key exposed. Use environment variables or a secrets manager in production.