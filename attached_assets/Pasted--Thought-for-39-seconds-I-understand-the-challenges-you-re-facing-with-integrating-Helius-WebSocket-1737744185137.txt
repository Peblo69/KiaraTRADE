

Thought for 39 seconds
I understand the challenges you're facing with integrating Helius WebSockets into your PumpFun Vision project. Let's address each of the issues you've encountered step-by-step and provide comprehensive solutions to ensure a stable, 24/7 WebSocket connection.

Issues Identified:
Buffer Module Error:

Error Message:
mathematica
Copy
Module "buffer" has been externalized for browser compatibility. Cannot access "buffer.Buffer" in client code.
Cause: The @solana/web3.js library internally uses the Node.js buffer module, which isn't natively available in the browser environment. Vite externalizes this module for compatibility, leading to the error when client code tries to access Buffer.
Axios Network Errors:

Error Messages:
css
Copy
[PumpPortal] Error fetching SOL price (attempt 1/3): AxiosError {message: "Network Error", ...}
Cause: The Axios requests to fetch the SOL price are failing, likely due to incorrect API endpoints, CORS issues, or network connectivity problems.
Helius WebSocket Instability:

Error Messages:
css
Copy
[Helius] WebSocket error: Event {isTrusted: true}
[Helius] WebSocket disconnected
[Helius] Attempting reconnect 1/5
...
Cause: Frequent disconnections and reconnection attempts indicate issues with the WebSocket connection logic, API key validity, or server-side restrictions.
Solutions:
We'll tackle each issue systematically. Below are the complete, fully rewritten files that address the identified problems. Ensure you replace the existing files in your project with these updated versions.

1. Update Vite Configuration to Polyfill buffer
File: vite.config.ts

Purpose: Polyfill the Node.js buffer module to make it available in the browser environment, resolving the Buffer-related error.

typescript
Copy
// vite.config.ts
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import { NodeGlobalsPolyfillPlugin } from '@esbuild-plugins/node-globals-polyfill';
import { NodeModulesPolyfillPlugin } from '@esbuild-plugins/node-modules-polyfill';
import inject from '@rollup/plugin-inject';

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  optimizeDeps: {
    esbuildOptions: {
      // Define global variables
      define: {
        global: 'globalThis',
      },
      // Enable esbuild polyfills
      plugins: [
        NodeGlobalsPolyfillPlugin({
          buffer: true
        }),
        NodeModulesPolyfillPlugin()
      ]
    }
  },
  build: {
    rollupOptions: {
      plugins: [
        inject({
          Buffer: ['buffer', 'Buffer'],
          process: 'process/browser',
        })
      ]
    }
  },
  resolve: {
    alias: {
      // Polyfill Buffer
      buffer: 'buffer/',
      // Polyfill process
      process: 'process/browser',
    }
  }
});
Explanation:

Polyfills Added:

Buffer: The buffer module is polyfilled using @esbuild-plugins/node-globals-polyfill and @esbuild-plugins/node-modules-polyfill.
Process: Similarly, the process module is polyfilled to handle any process-related functionalities.
Plugins Used:

NodeGlobalsPolyfillPlugin & NodeModulesPolyfillPlugin: These plugins ensure that global variables like Buffer and process are available in the browser.
@rollup/plugin-inject: Automatically injects the polyfills wherever Buffer and process are used.
Aliases:

buffer & process: Aliases are set to ensure that when buffer or process are imported, the polyfilled versions are used instead of the Node.js native modules.
Additional Steps:

Install Required Dependencies:

Run the following command to install the necessary polyfill packages:

bash
Copy
npm install --save-dev @esbuild-plugins/node-globals-polyfill @esbuild-plugins/node-modules-polyfill @rollup/plugin-inject buffer process
Restart Vite Server:

After updating the vite.config.ts, restart your Vite development server to apply the changes.

2. Fix Axios Network Errors in pump-portal-websocket.ts
File: client/src/lib/pump-portal-websocket.ts

Purpose: Ensure that the Axios requests to fetch the SOL price are correctly configured, handle CORS issues, and implement robust error handling with retries.

typescript
Copy
// client/src/lib/pump-portal-websocket.ts

import { create } from "zustand";
import { preloadTokenImages } from './token-metadata';
import axios from 'axios';

// Constants
const TOTAL_SUPPLY = 1_000_000_000;
const SOL_PRICE_UPDATE_INTERVAL = 10000; // Update every 10 seconds
const MAX_TRADES_PER_TOKEN = 100; // Limit stored trades
const RECONNECT_DELAY = 5000;
const MAX_RECONNECT_ATTEMPTS = 5;

// Types
export interface TimeWindowStats {
  startTime: number;
  endTime: number;
  openPrice: number;
  closePrice: number;
  highPrice: number;
  lowPrice: number;
  volume: number;
  trades: number;
  buys: number;
  sells: number;
}

export interface PumpPortalToken {
  symbol: string;
  name: string;
  address: string;
  price: number;
  marketCap: number;
  liquidity: number;
  liquidityChange: number;
  l1Liquidity: number;
  volume: number;
  volume24h: number;
  trades: number;
  trades24h: number;
  buys24h: number;
  sells24h: number;
  walletCount: number;
  timestamp: number;
  timeWindows: {
    [key: string]: TimeWindowStats;
  };
  recentTrades: TokenTrade[];
  status: TokenStatus;
  imageLink?: string;
}

interface TokenStatus {
  mad: boolean;
  fad: boolean;
  lb: boolean;
  tri: boolean;
}

interface TokenTrade {
  timestamp: number;
  price: number;
  volume: number;
  isBuy: boolean;
  wallet: string;
}

interface PumpPortalStore {
  tokens: PumpPortalToken[];
  isConnected: boolean;
  solPrice: number;
  addToken: (token: PumpPortalToken) => void;
  updateToken: (address: string, updates: Partial<PumpPortalToken>) => void;
  addTradeToHistory: (address: string, trade: any) => void;
  setConnected: (connected: boolean) => void;
  setSolPrice: (price: number) => void;
}

// Helper functions
const createEmptyTimeWindow = (startTime: number): TimeWindowStats => ({
  startTime,
  endTime: startTime + 1000,
  openPrice: 0,
  closePrice: 0,
  highPrice: 0,
  lowPrice: Infinity,
  volume: 0,
  trades: 0,
  buys: 0,
  sells: 0,
});

const calculatePriceImpact = (liquidity: number, tradeVolume: number, isBuy: boolean): number => {
  const impact = Math.min((tradeVolume / liquidity) * 0.005, 0.01); // Max 1% impact
  return isBuy ? (1 + impact) : (1 - impact);
};

// Store implementation
export const usePumpPortalStore = create<PumpPortalStore>((set, get) => ({
  tokens: [],
  isConnected: false,
  solPrice: 0,
  addToken: (token) => set((state) => ({
    tokens: [token, ...state.tokens].slice(0, 50), // Keep max 50 tokens
  })),
  updateToken: (address, updates) => set((state) => ({
    tokens: state.tokens.map((token) =>
      token.address === address ? { ...token, ...updates } : token
    ),
  })),
  addTradeToHistory: (address, trade) => {
    const state = get();
    const token = state.tokens.find(t => t.address === address);
    if (!token || !state.solPrice) return;

    const now = Date.now();
    const tradeVolume = Number(trade.solAmount || 0) * state.solPrice;
    const isBuy = trade.txType === 'buy';

    // Calculate new price with impact
    const priceImpact = calculatePriceImpact(token.liquidity || 1, tradeVolume, isBuy);
    const newPrice = (token.price || 0) * priceImpact;

    // Create new trade record
    const newTrade = {
      timestamp: now,
      price: newPrice,
      volume: tradeVolume,
      isBuy,
      wallet: trade.traderPublicKey
    };

    // Keep recent trades limited
    const recentTrades = [newTrade, ...(token.recentTrades || [])].slice(0, MAX_TRADES_PER_TOKEN);

    // Calculate 24h stats
    const last24h = now - 24 * 60 * 60 * 1000;
    const trades24h = recentTrades.filter(t => t.timestamp > last24h);
    const volume24h = trades24h.reduce((sum, t) => sum + t.volume, 0);
    const buys24h = trades24h.filter(t => t.isBuy).length;
    const sells24h = trades24h.length - buys24h;

    // Calculate market cap and liquidity
    const newMarketCap = newPrice * TOTAL_SUPPLY;
    const newLiquidity = token.liquidity + (isBuy ? tradeVolume : -tradeVolume);
    const liquidityChange = ((newLiquidity - token.liquidity) / token.liquidity) * 100;

    // Update token state
    set((state) => ({
      tokens: state.tokens.map(t =>
        t.address === address ? {
          ...t,
          price: newPrice,
          marketCap: newMarketCap,
          liquidity: newLiquidity,
          liquidityChange,
          volume: t.volume + tradeVolume,
          volume24h,
          trades: t.trades + 1,
          trades24h: trades24h.length,
          buys24h,
          sells24h,
          recentTrades,
          walletCount: new Set(recentTrades.map(trade => trade.wallet)).size
        } : t
      )
    }));

    // Store trade in database
    axios.post('/api/trades', {
      token_address: address,
      timestamp: new Date(now),
      price_usd: newPrice,
      volume_usd: tradeVolume,
      amount_sol: Number(trade.solAmount),
      is_buy: isBuy,
      wallet_address: trade.traderPublicKey,
      tx_signature: trade.signature,
    }).catch(error => {
      console.error('[PumpPortal] Failed to store trade:', error);
    });
  },
  setConnected: (connected) => set({ isConnected: connected }),
  setSolPrice: (price) => {
    if (price > 0) {
      console.log('[PumpPortal] Setting SOL price:', price);
      set({ solPrice: price });
    }
  },
}));

// WebSocket connection management
let ws: WebSocket | null = null;
let reconnectTimeout: NodeJS.Timeout | null = null;
let reconnectAttempts = 0;
let solPriceInterval: NodeJS.Timeout | null = null;

// Enhanced fetchSolanaPrice with exponential backoff and retries
const fetchSolanaPrice = async (retries = 3): Promise<number> => {
  for (let i = 0; i < retries; i++) {
    try {
      const response = await axios.get(
        'https://api.coingecko.com/api/v3/simple/price?ids=solana&vs_currencies=usd',
        { timeout: 5000 }
      );
      const price = response.data?.solana?.usd;
      if (!price || price <= 0) throw new Error('Invalid price response');
      return price;
    } catch (error) {
      console.error(`[PumpPortal] Error fetching SOL price (attempt ${i + 1}/${retries}):`, error);
      if (i === retries - 1) return 100; // Fallback price after all retries
      await new Promise(resolve => setTimeout(resolve, 1000 * (i + 1))); // Exponential backoff
    }
  }
  return 100; // Fallback price if all retries fail
};

// Initialize PumpPortal WebSocket Connection
export function initializePumpPortalWebSocket() {
  if (typeof window === 'undefined') return;

  const cleanup = () => {
    if (ws) {
      try {
        ws.close();
      } catch (e) {
        console.error('[PumpPortal] Error closing WebSocket:', e);
      }
      ws = null;
    }

    if (solPriceInterval) {
      clearInterval(solPriceInterval);
      solPriceInterval = null;
    }

    if (reconnectTimeout) {
      clearTimeout(reconnectTimeout);
      reconnectTimeout = null;
    }
  };

  cleanup();

  const store = usePumpPortalStore.getState();

  // Initialize SOL price updates
  fetchSolanaPrice()
    .then(price => {
      store.setSolPrice(price);
      solPriceInterval = setInterval(async () => {
        try {
          const price = await fetchSolanaPrice();
          store.setSolPrice(price);
        } catch (error) {
          console.error('[PumpPortal] Failed to update SOL price:', error);
        }
      }, SOL_PRICE_UPDATE_INTERVAL);
    })
    .catch(console.error);

  try {
    console.log('[PumpPortal] Initializing WebSocket...');
    ws = new WebSocket('wss://pumpportal.fun/api/data');

    ws.onopen = () => {
      console.log('[PumpPortal] WebSocket connected');
      store.setConnected(true);
      reconnectAttempts = 0;

      if (ws?.readyState === WebSocket.OPEN) {
        ws.send(JSON.stringify({
          method: "subscribeNewToken",
          keys: []
        }));

        const existingTokenAddresses = store.tokens.map(t => t.address);
        if (existingTokenAddresses.length > 0) {
          ws.send(JSON.stringify({
            method: "subscribeTokenTrade",
            keys: existingTokenAddresses
          }));
        }
      }
    };

    ws.onmessage = async (event) => {
      try {
        const data = JSON.parse(event.data);

        if (data.message?.includes('Successfully subscribed')) return;
        if (data.errors) {
          console.error('[PumpPortal] Error received:', data.errors);
          return;
        }

        if (data.txType === 'create' && data.mint) {
          try {
            const token = await mapPumpPortalData(data);
            store.addToken(token);

            if (token.imageLink) {
              preloadTokenImages([{
                imageLink: token.imageLink,
                symbol: token.symbol
              }]);
            }

            ws?.send(JSON.stringify({
              method: "subscribeTokenTrade",
              keys: [token.address]
            }));
          } catch (err) {
            console.error('[PumpPortal] Failed to process token:', err);
          }
        } else if (['buy', 'sell'].includes(data.txType) && data.mint) {
          store.addTradeToHistory(data.mint, data);
        }
      } catch (error) {
        console.error('[PumpPortal] Failed to parse message:', error);
      }
    };

    ws.onclose = () => {
      console.log('[PumpPortal] WebSocket disconnected');
      store.setConnected(false);
      cleanup();

      if (reconnectAttempts < MAX_RECONNECT_ATTEMPTS) {
        reconnectAttempts++;
        console.log(`[PumpPortal] Attempting reconnect ${reconnectAttempts}/${MAX_RECONNECT_ATTEMPTS}`);
        reconnectTimeout = setTimeout(initializePumpPortalWebSocket, RECONNECT_DELAY);
      }
    };

    ws.onerror = (error) => {
      console.error('[PumpPortal] WebSocket error:', error);
      store.setConnected(false);
    };

    // Cleanup on page unload
    window.addEventListener('beforeunload', cleanup);

  } catch (error) {
    console.error('[PumpPortal] Failed to initialize WebSocket:', error);
    store.setConnected(false);

    if (reconnectAttempts < MAX_RECONNECT_ATTEMPTS) {
      reconnectAttempts++;
      reconnectTimeout = setTimeout(initializePumpPortalWebSocket, RECONNECT_DELAY);
    }
  }
}

// Initialize WebSocket connection
initializePumpPortalWebSocket();

async function mapPumpPortalData(data: any): Promise<PumpPortalToken> {
  try {
    console.log('[PumpPortal] Raw data received:', data);
    const {
      mint,
      vSolInBondingCurve,
      marketCapSol,
      bondingCurveKey,
      name,
      symbol,
      solAmount,
      traderPublicKey,
      imageLink,
    } = data;

    // Ensure we have a valid SOL price
    let solPrice = usePumpPortalStore.getState().solPrice;
    if (!solPrice) {
      solPrice = await fetchSolanaPrice();
      usePumpPortalStore.getState().setSolPrice(solPrice);
    }

    // Calculate USD values using current SOL price
    const marketCapUsd = Number(marketCapSol || 0) * solPrice;
    const liquidityUsd = Number(vSolInBondingCurve || 0) * solPrice;
    const volumeUsd = Number(solAmount || 0) * solPrice;

    // Calculate price per token with fallback
    const totalSupply = TOTAL_SUPPLY;
    const priceUsd = marketCapUsd / totalSupply || 0;

    const now = Date.now();
    const token: PumpPortalToken = {
      symbol: symbol || mint?.slice(0, 6) || 'Unknown',
      name: name || `Token ${mint?.slice(0, 8)}`,
      address: mint || '',
      price: priceUsd,
      marketCap: marketCapUsd,
      liquidity: liquidityUsd,
      liquidityChange: 0,
      l1Liquidity: liquidityUsd,
      volume: volumeUsd,
      volume24h: volumeUsd,
      trades: 1,
      trades24h: 1,
      buys24h: 1, // Initial transaction is a buy
      sells24h: 0,
      walletCount: 1,
      timestamp: now,
      timeWindows: {
        '1m': createEmptyTimeWindow(now),
        '5m': createEmptyTimeWindow(now),
        '15m': createEmptyTimeWindow(now),
        '1h': createEmptyTimeWindow(now)
      },
      recentTrades: [{
        timestamp: now,
        price: priceUsd,
        volume: volumeUsd,
        isBuy: true, // Always mark initial dev wallet transaction as buy
        wallet: traderPublicKey
      }],
      status: {
        mad: false,
        fad: false,
        lb: Boolean(bondingCurveKey),
        tri: false
      },
      imageLink: imageLink || 'https://via.placeholder.com/150',
    };

    console.log('[PumpPortal] Mapped token:', {
      symbol: token.symbol,
      price: token.price,
      marketCap: token.marketCap,
      liquidity: token.liquidity
    });

    return token;
  } catch (error) {
    console.error('[PumpPortal] Error mapping data:', error);
    throw error;
  }
}
Explanation of Changes:

Enhanced fetchSolanaPrice Function:

Retry Logic: Implemented exponential backoff with retries to handle transient network issues.
Fallback Price: Returns a fallback price of 100 USD if all retries fail to prevent the application from crashing.
Direct API Call: Uses CoinGecko's API directly to fetch the SOL price, ensuring reliability and avoiding reliance on your backend /api/solana/price endpoint, which may have CORS or server-side issues.
Improved Error Handling:

Detailed Logging: Enhanced error logs to provide more context during failures.
Exponential Backoff: Waits longer between each retry attempt, reducing the likelihood of repeated immediate failures.
SOL Price Fetch Interval Reduced:

From: 30,000ms (30 seconds)
To: 10,000ms (10 seconds)
Reason: Provides more frequent updates to the SOL price, ensuring token data remains accurate.
Ensured SOL Price Availability:

Check: Before processing trades, ensures that the SOL price is available to calculate USD values accurately.
CORS and Network Reliability:

By moving the SOL price fetch to the client side using a reliable API (CoinGecko), potential CORS issues with your backend are bypassed.
3. Improve Helius WebSocket Stability in helius-websocket.ts
File: client/src/lib/helius-websocket.ts

Purpose: Enhance the Helius WebSocket connection logic to ensure a stable, long-lasting connection with robust error handling and reconnection strategies.