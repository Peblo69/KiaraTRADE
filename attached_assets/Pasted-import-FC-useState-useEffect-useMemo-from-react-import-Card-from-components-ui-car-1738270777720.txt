import { FC, useState, useEffect, useMemo } from 'react';
import { Card } from "@/components/ui/card";
import { ImageIcon, Globe, Search, Users, Crosshair, UserPlus, Copy } from 'lucide-react';
import { validateImageUrl } from '@/utils/image-handler';
import { validateSocialUrl } from '@/utils/social-links';
import { THRESHOLDS, getRiskLevelColor, formatMarketCap, calculateMarketCapProgress } from '@/utils/token-metrics';
import { cn } from "@/lib/utils";
import { PumpFunIcon } from './icons/PumpFunIcon';
import { TelegramIcon } from './icons/TelegramIcon';
import { XIcon } from './icons/XIcon';
import { DevHoldingIcon } from './icons/DevHoldingIcon';
import { InsiderIcon } from './icons/InsiderIcon';
import { usePumpPortalStore } from '@/lib/pump-portal-websocket';
import type { Token, TokenTrade } from '@/types/token';

interface TokenCardProps {
  token: Token;
  onClick: () => void;
  onBuyClick?: () => void;
  onCopyAddress?: () => void;
}

interface TokenMetrics {
  marketCapSol: number;
  volume24h: number;
  topHoldersPercentage: number;
  devWalletPercentage: number;
  insiderPercentage: number;
  snipersCount: number;
  holdersCount: number;
}

const calculateTokenMetrics = (
  token: Token,
  trades: TokenTrade[],
  creationTimestamp: number
): TokenMetrics => {
  const now = Date.now();
  const oneDayAgo = now - 24 * 60 * 60 * 1000;
  const snipeWindow = creationTimestamp + 15000; // 15 seconds after creation

  // Calculate 24h volume
  const volume24h = trades
    .filter(trade => trade.timestamp > oneDayAgo)
    .reduce((sum, trade) => sum + trade.solAmount, 0);

  // Count unique holders from finalized trades
  const holdersMap = new Map<string, number>();
  trades.forEach(trade => {
    if (trade.txType === 'buy') {
      holdersMap.set(trade.traderPublicKey, 
        (holdersMap.get(trade.traderPublicKey) || 0) + trade.tokenAmount);
    } else if (trade.txType === 'sell') {
      holdersMap.set(trade.traderPublicKey, 
        (holdersMap.get(trade.traderPublicKey) || 0) - trade.tokenAmount);
    }
  });

  // Remove holders with zero balance
  Array.from(holdersMap.entries())
    .filter(([_, balance]) => balance <= 0)
    .forEach(([wallet]) => holdersMap.delete(wallet));

  // Calculate top holders percentage
  const sortedHolders = Array.from(holdersMap.entries())
    .sort(([, a], [, b]) => b - a)
    .slice(0, 10);
  
  const totalSupply = token.vTokensInBondingCurve;
  const top10Supply = sortedHolders.reduce((sum, [_, amount]) => sum + amount, 0);
  const topHoldersPercentage = (top10Supply / totalSupply) * 100;

  // Calculate dev wallet percentage
  const devBalance = holdersMap.get(token.devWallet) || 0;
  const devWalletPercentage = (devBalance / totalSupply) * 100;

  // Count snipers (trades within 15s of creation)
  const snipers = new Set(
    trades
      .filter(t => t.timestamp <= snipeWindow && t.txType === 'buy')
      .map(t => t.traderPublicKey)
  );

  // Calculate insider percentage (excluding dev wallet)
  const insiderWallets = new Set(
    trades
      .filter(t => t.timestamp <= creationTimestamp + 3600000) // First hour
      .map(t => t.traderPublicKey)
  );
  insiderWallets.delete(token.devWallet);
  const insiderBalances = Array.from(insiderWallets)
    .reduce((sum, wallet) => sum + (holdersMap.get(wallet) || 0), 0);
  const insiderPercentage = (insiderBalances / totalSupply) * 100;

  return {
    marketCapSol: token.vSolInBondingCurve,
    volume24h,
    topHoldersPercentage,
    devWalletPercentage,
    insiderPercentage,
    snipersCount: snipers.size,
    holdersCount: holdersMap.size
  };
};

export const TokenCard: FC<TokenCardProps> = ({ 
  token, 
  onClick, 
  onBuyClick = () => console.log('Buy clicked'), 
  onCopyAddress = () => console.log('Address copied')
}) => {
  const [imageError, setImageError] = useState(false);
  const [validatedImageUrl, setValidatedImageUrl] = useState<string | null>(null);
  const [currentProgress, setCurrentProgress] = useState(0);
  const [metrics, setMetrics] = useState<TokenMetrics>({
    marketCapSol: token.marketCapSol || 0,
    volume24h: 0,
    topHoldersPercentage: 0,
    devWalletPercentage: 0,
    insiderPercentage: 0,
    snipersCount: 0,
    holdersCount: 0
  });

  // Subscribe to real-time updates
  useEffect(() => {
    const unsubscribe = usePumpPortalStore.subscribe(
      state => state.tokens.find(t => t.address === token.address),
      (updatedToken) => {
        if (updatedToken) {
          const newMetrics = calculateTokenMetrics(
            updatedToken,
            updatedToken.recentTrades,
            updatedToken.createdAt
          );
          setMetrics(prev => {
            // Flash indicators if values changed
            if (prev.marketCapSol !== newMetrics.marketCapSol ||
                prev.volume24h !== newMetrics.volume24h) {
              // Trigger flash animation via CSS class
              document.getElementById(`token-${token.address}`)
                ?.classList.add('flash-update');
              setTimeout(() => {
                document.getElementById(`token-${token.address}`)
                  ?.classList.remove('flash-update');
              }, 1000);
            }
            return newMetrics;
          });
        }
      }
    );

    return () => unsubscribe();
  }, [token.address]);

  // Refresh volume every 10 minutes
  useEffect(() => {
    const interval = setInterval(() => {
      setMetrics(prev => ({
        ...prev,
        volume24h: calculateTokenMetrics(
          token,
          token.recentTrades,
          token.createdAt
        ).volume24h
      }));
    }, 600000); // 10 minutes

    return () => clearInterval(interval);
  }, [token]);

  // Image validation
  useEffect(() => {
    const rawImageUrl = token.metadata?.imageUrl || token.imageUrl;
    const processedUrl = validateImageUrl(rawImageUrl);
    setValidatedImageUrl(processedUrl);
  }, [token]);

  // Progress bar animation
  useEffect(() => {
    const targetProgress = calculateMarketCapProgress(metrics.marketCapSol);
    if (currentProgress !== targetProgress) {
      const step = (targetProgress - currentProgress) / 10;
      const timeout = setTimeout(() => {
        setCurrentProgress(prev => {
          const next = prev + step;
          return Math.abs(next - targetProgress) < 0.1 ? targetProgress : next;
        });
      }, 50);
      return () => clearTimeout(timeout);
    }
  }, [metrics.marketCapSol, currentProgress]);

  const displayName = token.name || token.metadata?.name || `Token ${token.address.slice(0, 8)}`;
  const displaySymbol = token.symbol || token.metadata?.symbol || token.address.slice(0, 6).toUpperCase();

  const getTopHoldersColor = (percentage: number) => 
    percentage <= 15 ? "text-green-400 hover:text-green-300" : "text-red-400 hover:text-red-300";

  const getDevHoldingColor = (percentage: number) => 
    percentage <= 15 ? "text-green-400" : "text-red-400";

  const getInsiderColor = (percentage: number) => 
    percentage <= 10 ? "text-green-400" : "text-red-400";

  const getSnipersColor = (count: number) => 
    count <= 5 ? "text-green-400" : "text-red-400";

  // Rest of your existing render code remains exactly the same
  return (
    <Card 
      id={`token-${token.address}`}
      className={cn(
        "group cursor-pointer transition-all duration-300 cosmic-glow space-gradient",
        "hover:scale-[1.02] hover:shadow-lg hover:shadow-purple-500/20",
        "p-2 relative overflow-hidden"
      )}
      onClick={onClick}
    >
      {/* Your existing card content */}
      <div className="ambient-glow" />

      <div className="relative p-2">
        {/* ... rest of your existing JSX ... */}
      </div>
    </Card>
  );
};

export default TokenCard;

To implement this:

    Replace your entire TokenCard.tsx file with this code
    Add this CSS to your global styles (for the flash animation):

CSS

.flash-update {
  animation: flash 1s ease-out;
}

@keyframes flash {
  0% { background-color: rgba(147, 51, 234, 0.1); }
  100% { background-color: transparent; }
}