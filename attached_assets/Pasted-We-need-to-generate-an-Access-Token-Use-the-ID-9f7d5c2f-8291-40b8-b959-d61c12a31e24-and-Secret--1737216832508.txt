We need to generate an Access Token:

Use the ID (9f7d5c2f-8291-40b8-b959-d61c12a31e24) and Secret (.HYVwV8z.JuuW8SIlTgwj9g~ms) to request an Access Token from BitQuery's OAuth service.
The token is required for authenticating the WebSocket connection.
Python Script for Token Generation:

Here's the Python code to generate the token:
python
Copy
Edit
import requests

def generate_access_token():
    url = "https://oauth2.bitquery.io/oauth2/token"
    payload = {
        'grant_type': 'client_credentials',
        'client_id': "9f7d5c2f-8291-40b8-b959-d61c12a31e24",  # Provided Client ID
        'client_secret': ".HYVwV8z.JuuW8SIlTgwj9g~ms",  # Provided Client Secret
        'scope': 'api'
    }
    headers = {'Content-Type': 'application/x-www-form-urlencoded'}

    print("Requesting Access Token...")
    response = requests.post(url, data=payload, headers=headers)
    if response.status_code == 200:
        token = response.json()['access_token']
        print("Access Token Generated:", token)
        # Save the token to a file for the WebSocket connection
        with open("access_token.txt", "w") as file:
            file.write(token)
        print("Access Token saved to access_token.txt")
    else:
        print("Failed to generate token:", response.text)

generate_access_token()
What this does:
Requests a token using the ID and Secret.
Saves the token to a file called access_token.txt.
WebSocket Code with Token:

After generating the token, the WebSocket code will use it for authentication.
Hereâ€™s how the WebSocket code looks:
javascript
Copy
Edit
import { createClient } from 'graphql-ws';
import fs from 'fs';

console.log("Reading Access Token...");
const apiKey = fs.readFileSync('access_token.txt', 'utf8').trim(); // Read the saved token

const client = createClient({
    url: 'wss://streaming.bitquery.io/eap', // WebSocket URL
    connectionParams: {
        headers: {
            'Authorization': `Bearer ${apiKey}`, // Use the token
        },
    },
    on: {
        connected: () => console.log('[BitQuery] WebSocket connected successfully'),
        error: (error) => console.error('[BitQuery] WebSocket error:', error),
        closed: () => console.log('[BitQuery] WebSocket closed'),
    },
});

// Test Subscription for Token Creation
client.subscribe(
    {
        query: `
            subscription {
                Solana {
                    Instructions(
                        where: {
                            Instruction: {
                                Program: {
                                    Method: { is: "create" },
                                    Name: { is: "pump" }
                                }
                            }
                        }
                    ) {
                        Instruction {
                            Accounts {
                                Address
                                Token {
                                    Mint
                                    Owner
                                    ProgramId
                                }
                            }
                            Program {
                                Method
                                Name
                            }
                        }
                        Transaction {
                            Signature
                        }
                    }
                }
            }
        `,
    },
    {
        next: (data) => console.log('[BitQuery] New token detected:', data),
        error: (error) => console.error('[BitQuery] Subscription error:', error),
        complete: () => console.log('[BitQuery] Subscription completed'),
    },
);
How the Code Works:

First, run the Python script to generate the token (access_token.txt).
Then, the JavaScript WebSocket code reads the token from the file and uses it to connect to the WebSocket.
Automatically Refresh Token:

Since the token expires after 10 hours, we need to regenerate it automatically.
Use a Python script to refresh the token every 9 hours and save it to the same access_token.txt file.
python
Copy
Edit
import time

def refresh_token_periodically():
    while True:
        generate_access_token()  # Call the token generation function
        print("Access Token refreshed. Waiting 9 hours for the next refresh...")
        time.sleep(9 * 60 * 60)  # Wait 9 hours

refresh_token_periodically()
Steps for Replit AI:

Step 1: Add the Python script for token generation and make sure it runs.
Step 2: Save the token to access_token.txt.
Step 3: Use the JavaScript WebSocket code to connect using the token.
Step 4: Add a process to refresh the token periodically.
Debugging Tips for the AI
If the WebSocket connection still fails:
Verify the access_token.txt contains the latest token.
Check for Unauthorized errors (token might be invalid).
Make sure the WebSocket URL (wss://streaming.bitquery.io/eap) is correct.
Print the full error logs for more details.