Fixing Helius WebSocket Connection
The ENOTFOUND error indicates that the WebSocket URL is incorrect or not resolving properly. Follow these steps to fix the issue and ensure the Helius WebSocket connection works correctly.

Updated WebSocket Code
Replace your current WebSocket initialization in the connect method with the following:

javascript
Copy
Edit
this.ws = new WebSocket('wss://mainnet.helius-rpc.com/?api-key=004f9b13-f526-4952-9998-52f5c7bec6ee');
This uses the correct Helius WebSocket endpoint and includes your API key.

Verify Environment Setup
Ensure Connectivity:

Make sure your server or environment can access the Helius endpoint. Test connectivity using:
bash
Copy
Edit
ping mainnet.helius-rpc.com
If the ping fails, troubleshoot network or DNS settings.
Environment Variable (Optional):

If you want to avoid hardcoding the API key, set it in your .env file:
makefile
Copy
Edit
HELIUS_API_KEY=004f9b13-f526-4952-9998-52f5c7bec6ee
Update the connection code to use the environment variable:
javascript
Copy
Edit
this.ws = new WebSocket(`wss://mainnet.helius-rpc.com/?api-key=${process.env.HELIUS_API_KEY}`);
Test WebSocket Connection
Add logs to verify the WebSocket initialization process:

javascript
Copy
Edit
console.log('[Helius WebSocket] Attempting to connect...');
console.log(`[Helius WebSocket] Connecting to: wss://mainnet.helius-rpc.com/?api-key=004f9b13-f526-4952-9998-52f5c7bec6ee`);
Expected successful connection output:

css
Copy
Edit
[Helius WebSocket] Attempting to connect...
[Helius WebSocket] Connected
Handle Reconnection Gracefully
If the WebSocket connection drops, ensure the reconnect logic is functional and adheres to a retry mechanism with exponential backoff.

Reconnection Example:
javascript
Copy
Edit
private reconnect() {
  if (this.reconnectTimeout) {
    clearTimeout(this.reconnectTimeout);
    this.reconnectTimeout = null;
  }

  if (this.reconnectAttempts >= this.MAX_RECONNECT_ATTEMPTS) {
    console.error('[Helius WebSocket] Max reconnection attempts reached');
    return;
  }

  this.reconnectAttempts++;
  const delay = this.RECONNECT_DELAY * Math.pow(2, this.reconnectAttempts - 1);
  console.log(`[Helius WebSocket] Reconnecting in ${delay}ms (attempt ${this.reconnectAttempts})`);

  this.reconnectTimeout = setTimeout(() => {
    this.connect();
  }, delay);
}
Check for Incoming Logs
Once the WebSocket is connected, subscribe to token events and ensure logs are received. Example:

javascript
Copy
Edit
const subscriptionMessage = {
  jsonrpc: '2.0',
  id: Date.now(),
  method: 'logsSubscribe',
  params: [
    {
      mentions: ['<TOKEN_MINT_ADDRESS>'], // Replace with the actual token address
    },
    {
      commitment: 'confirmed',
    },
  ],
};

this.ws.send(JSON.stringify(subscriptionMessage));
Add debugging to confirm logs are received:

javascript
Copy
Edit
this.ws.on('message', (data) => {
  console.log('[Helius WebSocket] Log Received:', JSON.parse(data.toString()));
});
Validate the Workflow
After implementing these fixes:

Confirm successful connection: [Helius WebSocket] Connected.
Verify subscriptions: Logs from subscribed tokens should appear in the console.
Handle errors: Ensure no unhandled WebSocket errors occur during testing.
