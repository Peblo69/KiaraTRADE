The WebSocket manager is PERFECT - it's handling everything right:

    SOL price updates
    Trade data
    Price calculations
    Reconnection logic

The issue is that your chart might be trying to create its OWN connection instead of using this manager!

Let's fix the chart to use your existing WebSocket manager:
TypeScript

import React, { useEffect, useRef } from 'react';
import { LineChart } from 'lucide-react';
import { usePumpPortalStore } from '@/lib/pump-portal-websocket';
import { wsManager } from '@/lib/websocket-manager'; // Import your manager

interface Props {
  tokenAddress: string;
}

const TradingChart: React.FC<Props> = ({ tokenAddress }) => {
  const containerRef = useRef<HTMLDivElement>(null);
  const chartRef = useRef<any>(null);
  
  // Get data from YOUR store
  const token = usePumpPortalStore(state => state.getToken(tokenAddress));
  const trades = token?.recentTrades || [];
  const solPrice = usePumpPortalStore(state => state.solPrice);
  const isConnected = usePumpPortalStore(state => state.isConnected);

  useEffect(() => {
    // Don't create new WebSocket - use existing manager
    console.log('[Chart] Using WebSocket Manager Status:', wsManager.getStatus());

    const script = document.createElement('script');
    script.src = 'https://unpkg.com/lightweight-charts/dist/lightweight-charts.standalone.production.js';
    script.async = true;
    
    script.onload = () => {
      if (!containerRef.current || !window.LightweightCharts) return;

      // Clear previous chart only
      if (chartRef.current) {
        containerRef.current.innerHTML = '';
      }

      const chart = window.LightweightCharts.createChart(containerRef.current, {
        layout: {
          background: { color: '#0D0B1F' },
          textColor: '#d1d4dc',
        },
        grid: {
          vertLines: { color: 'rgba(42, 46, 57, 0.2)' },
          horzLines: { color: 'rgba(42, 46, 57, 0.2)' },
        },
        width: containerRef.current.clientWidth,
        height: 500,
        timeScale: {
          timeVisible: true,
          secondsVisible: true,
        },
      });

      const candleSeries = chart.addCandlestickSeries({
        upColor: '#26a69a',
        downColor: '#ef5350',
        borderUpColor: '#26a69a',
        borderDownColor: '#ef5350',
        wickUpColor: '#26a69a',
        wickDownColor: '#ef5350',
      });

      const volumeSeries = chart.addHistogramSeries({
        color: '#385263',
        priceFormat: {
          type: 'volume',
        },
        priceScaleId: '', 
        scaleMargins: {
          top: 0.8,
          bottom: 0,
        },
      });

      // Process trades using same logic as WebSocket manager
      if (trades.length > 0 && token) {
        const ohlcData = new Map();
        const minuteInMs = 60000;

        trades.forEach(trade => {
          // Use same price calculation as your WebSocket manager
          const priceInSol = trade.solAmount / 1_000_000_000;
          const priceInUsd = priceInSol * solPrice;

          const timestamp = Math.floor(trade.timestamp / minuteInMs) * minuteInMs;

          if (!ohlcData.has(timestamp)) {
            ohlcData.set(timestamp, {
              time: timestamp / 1000,
              open: priceInUsd,
              high: priceInUsd,
              low: priceInUsd,
              close: priceInUsd,
              volume: trade.tokenAmount
            });
          } else {
            const candle = ohlcData.get(timestamp);
            candle.high = Math.max(candle.high, priceInUsd);
            candle.low = Math.min(candle.low, priceInUsd);
            candle.close = priceInUsd;
            candle.volume += trade.tokenAmount;
          }
        });

        const candleData = Array.from(ohlcData.values())
          .sort((a, b) => a.time - b.time);

        candleSeries.setData(candleData);
        volumeSeries.setData(candleData);

        // Update latest candle
        const lastCandle = candleData[candleData.length - 1];
        if (lastCandle) {
          candleSeries.update(lastCandle);
          volumeSeries.update(lastCandle);
        }
      }

      // Handle resizing
      const handleResize = () => {
        if (containerRef.current) {
          chart.applyOptions({
            width: containerRef.current.clientWidth
          });
        }
      };

      window.addEventListener('resize', handleResize);
      chartRef.current = chart;

      return () => {
        window.removeEventListener('resize', handleResize);
        if (chart) {
          chart.remove();
        }
        // DON'T disconnect WebSocket here!
      };
    };

    document.head.appendChild(script);
    return () => {
      if (script.parentNode) {
        script.parentNode.removeChild(script);
      }
      // DON'T disconnect WebSocket here either!
    };
  }, [token, trades, solPrice, isConnected]);

  return (
    <div className="relative bg-[#0D0B1F] rounded-lg p-4 border border-purple-900/30">
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center space-x-2">
          <LineChart className="w-5 h-5 text-purple-400" />
          <h2 className="text-purple-100 font-semibold">
            {token?.symbol || tokenAddress.slice(0, 6)}... Price Chart
          </h2>
        </div>
      </div>
      <div ref={containerRef} className="h-[500px] w-full" />
    </div>
  );
};

export default TradingChart;

Key fixes:

    Uses your wsManager instead of making new connection
    Same price calculation as your WebSocket manager (รท BILLION)
    Doesn't kill the WebSocket on unmount
    Uses same store data as other components

Changes:

    Removed all WebSocket setup/cleanup
    Uses existing manager's connection
    Matches your price calculations exactly
    Keeps main WebSocket alive
