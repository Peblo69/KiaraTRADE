OAuth Authentication:

This code uses OAuth2 to request an access token from BitQuery.
It sends the client ID and secret to the https://oauth2.bitquery.io/oauth2/token endpoint.
The token is then used to authenticate the WebSocket connection.
What the Code Does:

First, it fetches the OAuth token using a POST request with the client ID and secret.
Then, the WebSocket connection uses the token in the Authorization header to connect securely.
If the token expires or the connection fails, it retries with exponential backoff.
Fixing "Failed to Fetch" Error:

Ensure Internet Access: The Replit environment needs internet access to make the POST request.
CORS Issues: Verify if there are no CORS restrictions. Replit might need additional headers if the endpoint enforces CORS policies.
Debugging Authentication:
Use console.log to print the full response object from the OAuth endpoint.
Look for additional error details in the response.statusText or response.body.
Key Improvements in the Code
1. Error Handling for Fetch:
If the fetch request to the OAuth token endpoint fails, the error is now logged clearly.
Example:
javascript
Copy
Edit
if (!response.ok) {
  console.error("Failed to fetch token. Status:", response.status, response.statusText);
  throw new Error(`OAuth token request failed: ${response.statusText}`);
}
2. Connection Timeout Handling:
If the WebSocket connection takes too long, the code retries automatically.
The retry logic uses exponential backoff to avoid hammering the server.
3. Clear Debugging Messages:
The DebugConsole now logs clear and actionable messages for:
OAuth token generation.
WebSocket connection status.
Subscription success or failure.
Key Steps for the Replit AI to Execute
Run the OAuth Flow:

Make sure the POST request to the https://oauth2.bitquery.io/oauth2/token endpoint works.
If the token is returned successfully, print and verify it:
javascript
Copy
Edit
console.log("Generated Access Token:", data.access_token);
Verify the WebSocket Connection:

After fetching the token, ensure the WebSocket connects using:
javascript
Copy
Edit
headers: { 'Authorization': `Bearer ${token}` }
Debug Any Issues:

If the OAuth request fails, check:
Network Access: Ensure Replit can reach the https://oauth2.bitquery.io endpoint.
Correct Credentials: Verify the client ID and secret.
Retry Logic:

Test the retry mechanism by simulating a failed WebSocket connection (e.g., by disabling the internet temporarily).
Ensure the retry attempts respect the exponential backoff timing.
Expected Debug Console Output
When everything works, the DebugConsole should log:

Token Retrieval:

csharp
Copy
Edit
[BitQuery] Access token obtained successfully
WebSocket Connection:

arduino
Copy
Edit
[BitQuery] WebSocket connected successfully
Subscription Data:

css
Copy
Edit
[BitQuery] Test subscription data received: { ...data... }
If there are issues, the error messages will guide further debugging.

Potential Fix for "Failed to Fetch"
1. Ensure Correct Headers and Content-Type:
Check the headers:
javascript
Copy
Edit
headers: {
  'Content-Type': 'application/x-www-form-urlencoded',
}
2. Network Access Issues:
Ensure Replit can access https://oauth2.bitquery.io.
Run a basic fetch to test connectivity:
javascript
Copy
Edit
fetch('https://oauth2.bitquery.io/status')
  .then(response => console.log(response.status))
  .catch(err => console.error("Connection issue:", err));
3. Invalid Credentials:
Double-check the client_id and client_secret.