Bullx and Photon likely combine multiple data sources to enrich the information provided by WebSocket streams. Here’s how they might do it:

Token Metadata API Integration

They use blockchain explorers or token metadata APIs to fetch additional information like:
Token images.
Descriptions.
Tokenomics.
Common sources for Solana tokens:
Metaplex Metadata Program: This stores metadata (e.g., name, symbol, URI, image) for Solana tokens.
Solana API Services: Tools like The Graph, Helius, or Solana RPC can retrieve token metadata.
Example Query for Token Metadata:

Query the token’s metadata using the mint address (x66AYvexU3WHEHrJkT1Z9CYLw3f4irjxhbybkwgpump in your example).
Parse the uri field from the token's on-chain data.
IPFS or Arweave Integration

If the uri points to IPFS or Arweave, retrieve metadata JSON files that often contain:
Token images.
Extended descriptions.
Project links.
Example JSON Structure:

json
Copy
Edit
{
  "name": "Saime",
  "symbol": "SAIME",
  "image": "https://ipfs.io/ipfs/QmXyz12345/example.png",
  "description": "The official token for Saime platform."
}
Price Data API

Real-time token price and liquidity are fetched from APIs like:
CoinGecko or CoinMarketCap.
Decentralized exchanges like Raydium or Orca.
Example API Call:

Use Raydium’s or Orca’s pool data to retrieve price, liquidity, and volume for specific token pairs.
Transaction Tracking

They track transactions using blockchain explorers like Solscan or APIs like Helius to get:
Trade history.
Whale transactions.
Developer activity.
How to Implement This in Your Project
To enrich the token display, follow these steps:

Step 1: Fetch Metadata Using mint Address
Use the mint address from the WebSocket message to query Solana’s on-chain metadata.
Example with Solana Web3.js:

javascript
Copy
Edit
const { Metadata } = require('@metaplex-foundation/mpl-token-metadata');

async function fetchTokenMetadata(mintAddress, connection) {
  const metadataPDA = await Metadata.getPDA(mintAddress);
  const metadata = await Metadata.load(connection, metadataPDA);
  const uri = metadata.data.data.uri; // Metadata URI (IPFS or Arweave)
  const response = await fetch(uri);
  return await response.json(); // Contains image, description, etc.
}
Step 2: Retrieve Price and Liquidity Data
Use decentralized exchange APIs or blockchain data services:

Raydium/Orca API Example:
Fetch pool details for the token’s pair.
Extract price, liquidity, and volume.
Example Raydium API Endpoint:

lua
Copy
Edit
GET https://api.raydium.io/pairs
Step 3: Fetch Images from Metadata URI
Extract the uri from the token's metadata.
Fetch the image field in the metadata JSON.
Display the image in your card UI.
Fallback Handling: If the uri or image field is missing, use a placeholder.

Step 4: Display Enhanced Information
Combine all this data into your existing card layout. For example:

Token Image: Fetch from uri or use a placeholder.
Market Cap and Liquidity: Real-time values from DEX APIs.
Transaction Link: Use signature to link to Solscan.
Example Token Display Card:

html
Copy
Edit
<div class="token-card">
  <img src="https://ipfs.io/ipfs/QmXyz12345/example.png" alt="Token Image">
  <h2>Saime</h2>
  <p>Symbol: SAIME</p>
  <p>Market Cap: 111.84 SOL</p>
  <p>Liquidity: 60.00 SOL</p>
  <a href="https://solscan.io/tx/38ALNHCWV..." target="_blank">View Transaction</a>
</div>
Step 5: Automate Data Enrichment
Create a pipeline to enrich WebSocket data:

Listen to WebSocket messages.
For each token:
Fetch metadata using the mint address.
Retrieve price and liquidity data.
Merge all data into a single object.
Update the UI with the enriched data.
Tools You’ll Need
Blockchain API:
Solana Web3.js: For metadata and mint details.
Helius or The Graph: For tracking token and transaction data.
DEX API:
Raydium or Orca for real-time price and liquidity.
Image Hosting:
Fetch token images from IPFS or Arweave URIs.