The issue is:

    We're using getState() in useMemo which doesn't react to updates
    We need to use hooks for live updates
    Our subscription setup isn't triggering re-renders properly

Here's the fixed TradeHistory component:
TypeScript

import React from 'react';
import { History, ExternalLink, Copy, CheckCircle } from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';
import { usePumpPortalStore } from '@/lib/pump-portal-websocket';
import { useHeliusStore } from '@/lib/helius-websocket';

interface Props {
  tokenAddress: string;
}

const TradeHistory: React.FC<Props> = ({ tokenAddress }) => {
  const [copiedAddress, setCopiedAddress] = React.useState<string | null>(null);

  // Use hooks instead of getState() for live updates
  const pumpTrades = usePumpPortalStore(state => 
    state.getToken(tokenAddress)?.recentTrades || []
  );
  
  const heliusTrades = useHeliusStore(state => 
    state.tokenData[tokenAddress]?.trades || []
  );

  // Combine and sort trades with proper dependency tracking
  const trades = React.useMemo(() => {
    // Deduplicate trades by signature
    const tradeMap = new Map();
    [...pumpTrades, ...heliusTrades].forEach(trade => {
      if (!tradeMap.has(trade.signature)) {
        tradeMap.set(trade.signature, trade);
      }
    });

    return Array.from(tradeMap.values())
      .sort((a, b) => b.timestamp - a.timestamp)
      .slice(0, 100);
  }, [pumpTrades, heliusTrades]); // Update when either source changes

  // Setup subscriptions when component mounts
  React.useEffect(() => {
    if (!tokenAddress) return;

    // Ensure we're subscribed to updates
    useHeliusStore.getState().subscribeToToken(tokenAddress);
    usePumpPortalStore.getState().addToViewedTokens(tokenAddress);

    return () => {
      // Cleanup subscriptions on unmount
      useHeliusStore.getState().unsubscribeFromToken(tokenAddress);
    };
  }, [tokenAddress]);

  // Rest of your component stays the same...
  const formatTime = (timestamp: number) => {
    return new Date(timestamp).toLocaleTimeString('en-US', {
      hour12: false,
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    });
  };

  const copyToClipboard = React.useCallback((address: string) => {
    navigator.clipboard.writeText(address);
    setCopiedAddress(address);
    setTimeout(() => setCopiedAddress(null), 2000);
  }, []);

  // Rest of your JSX stays the same...
  return (
    <div className="bg-[#0D0B1F] rounded-lg border border-purple-900/30">
      {/* Your existing JSX */}
    </div>
  );
};

// Use memo but with proper comparison
export default React.memo(TradeHistory, (prevProps, nextProps) => 
  prevProps.tokenAddress === nextProps.tokenAddress
);

The key changes:

    Use hooks instead of getState()
    Proper dependency tracking in useMemo
    Setup subscriptions in useEffect
    Remove manual subscribe/unsubscribe logic
