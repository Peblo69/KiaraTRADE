
    First, update the token analytics endpoint in routes.ts:

TypeScript

// Add token analytics endpoint
app.get('/api/token-analytics/:mint', async (req, res) => {
  try {
    const { mint } = req.params;
    console.log(`[Routes] Getting analytics for token ${mint}`);

    // 1. Get Basic Token Info and Transfers
    const [assetResponse, transfersResponse] = await Promise.all([
      axios.post(HELIUS_RPC_URL, {
        jsonrpc: '2.0',
        id: 'asset-info',
        method: 'getAsset',
        params: {
          id: mint
        }
      }),
      axios.post(HELIUS_RPC_URL, {
        jsonrpc: '2.0',
        id: 'transfers',
        method: 'getAssetTransfers',
        params: {
          asset: mint,
          limit: 100,
          sortBy: {
            timestamp: 'desc'
          }
        }
      })
    ]);

    const tokenInfo = assetResponse.data.result;
    const transfers = transfersResponse.data.result || [];

    // 2. Get Jupiter DEX Data
    let jupiterData = null;
    try {
      const jupResponse = await axios.get(`https://price.jup.ag/v4/price?ids=${mint}`);
      jupiterData = jupResponse.data?.data?.[mint];
    } catch (error) {
      console.log(`No Jupiter liquidity found for ${mint}`);
    }

    // 3. Process transfers to identify holders and snipers
    const holders = new Map();
    const snipers = new Set();
    const trades = [];
    const creationTime = transfers[transfers.length - 1]?.timestamp || Date.now();
    const sniperWindow = 30000; // 30 seconds

    transfers.forEach(transfer => {
      // Track holders
      const { fromAddress, toAddress, amount, timestamp } = transfer;
      
      if (fromAddress) {
        const currentFromBalance = holders.get(fromAddress) || 0;
        holders.set(fromAddress, currentFromBalance - amount);
      }
      
      if (toAddress) {
        const currentToBalance = holders.get(toAddress) || 0;
        holders.set(toAddress, currentToBalance + amount);

        // Check for snipers (early buyers)
        if (timestamp - creationTime <= sniperWindow) {
          snipers.add({
            address: toAddress,
            amount,
            timestamp,
            profit: calculateProfit(transfers, toAddress, amount, timestamp)
          });
        }
      }

      // Track trades
      trades.push({
        type: fromAddress ? 'sell' : 'buy',
        address: fromAddress || toAddress,
        amount,
        timestamp,
        price: jupiterData?.price || 0
      });
    });

    // 4. Calculate holder metrics
    const holderMetrics = calculateHolderMetrics(holders);
    const snipersArray = Array.from(snipers);
    const topHolders = getTopHolders(holders, 10);
    const holderConcentration = calculateHolderConcentration(holders);

    // 5. Prepare response
    const analytics = {
      token: {
        address: mint,
        name: tokenInfo.content?.metadata?.name || 'Unknown',
        symbol: tokenInfo.content?.metadata?.symbol || 'Unknown',
        decimals: tokenInfo.token_info?.decimals || 0,
        totalSupply: tokenInfo.token_info?.supply || 0,
        mintAuthority: tokenInfo.authorities?.[0]?.address || null,
        freezeAuthority: tokenInfo.authorities?.[1]?.address || null
      },
      holders: {
        total: holderMetrics.totalHolders,
        unique: holderMetrics.uniqueHolders,
        top10: topHolders,
        concentration: holderConcentration,
        distribution: holderMetrics.distribution
      },
      snipers: {
        total: snipersArray.length,
        details: snipersArray.slice(0, 10), // Top 10 snipers
        volume: calculateSniperVolume(snipersArray),
        averageAmount: calculateAverageAmount(snipersArray)
      },
      trading: {
        volume24h: calculateVolume24h(trades),
        transactions24h: calculateTransactions24h(trades),
        averageTradeSize: calculateAverageTradeSize(trades),
        priceImpact: calculatePriceImpact(trades)
      },
      risk: {
        holderConcentration: holderConcentration.riskLevel,
        sniperActivity: calculateSniperRisk(snipersArray),
        mintRisk: tokenInfo.authorities?.length > 0 ? 'high' : 'low',
        overallRisk: calculateOverallRisk({
          holderConcentration,
          snipers: snipersArray,
          authorities: tokenInfo.authorities
        })
      }
    };

    console.log('[Routes] Analytics prepared:', {
      holdersCount: analytics.holders.total,
      snipersCount: analytics.snipers.total,
      risk: analytics.risk.overallRisk
    });

    res.json(analytics);

  } catch (error: any) {
    console.error('[Routes] Token analytics error:', error);
    res.status(500).json({
      error: 'Failed to fetch token analytics',
      details: error.message
    });
  }
});

// Helper functions for analytics calculations
function calculateHolderMetrics(holders: Map<string, number>) {
  const validHolders = Array.from(holders.entries())
    .filter(([_, balance]) => balance > 0);

  const totalHolders = validHolders.length;
  const totalSupply = validHolders.reduce((sum, [_, balance]) => sum + balance, 0);

  return {
    totalHolders,
    uniqueHolders: new Set(validHolders.map(([address]) => address)).size,
    distribution: calculateDistribution(validHolders, totalSupply)
  };
}

function calculateDistribution(holders: [string, number][], totalSupply: number) {
  const ranges = [
    { name: 'Whales (>1%)', min: 0.01 },
    { name: 'Large (0.1-1%)', min: 0.001, max: 0.01 },
    { name: 'Medium (0.01-0.1%)', min: 0.0001, max: 0.001 },
    { name: 'Small (<0.01%)', max: 0.0001 }
  ];

  return ranges.map(range => ({
    name: range.name,
    holders: holders.filter(([_, balance]) => {
      const percentage = balance / totalSupply;
      return (!range.min || percentage >= range.min) && 
             (!range.max || percentage < range.max);
    }).length
  }));
}

function getTopHolders(holders: Map<string, number>, limit: number) {
  return Array.from(holders.entries())
    .filter(([_, balance]) => balance > 0)
    .sort(([, a], [, b]) => b - a)
    .slice(0, limit)
    .map(([address, balance]) => ({
      address,
      balance,
      percentage: balance / Array.from(holders.values()).reduce((a, b) => a + b, 0) * 100
    }));
}

function calculateSniperVolume(snipers: any[]) {
  return snipers.reduce((sum, sniper) => sum + sniper.amount, 0);
}

function calculateAverageAmount(snipers: any[]) {
  return snipers.length ? calculateSniperVolume(snipers) / snipers.length : 0;
}

function calculateVolume24h(trades: any[]) {
  const oneDayAgo = Date.now() - 24 * 60 * 60 * 1000;
  return trades
    .filter(trade => trade.timestamp >= oneDayAgo)
    .reduce((sum, trade) => sum + (trade.amount * trade.price), 0);
}

function calculateTransactions24h(trades: any[]) {
  const oneDayAgo = Date.now() - 24 * 60 * 60 * 1000;
  return trades.filter(trade => trade.timestamp >= oneDayAgo).length;
}

function calculateAverageTradeSize(trades: any[]) {
  return trades.length ? trades.reduce((sum, trade) => sum + trade.amount, 0) / trades.length : 0;
}

function calculatePriceImpact(trades: any[]) {
  if (trades.length < 2) return 0;
  const sortedTrades = [...trades].sort((a, b) => b.amount - a.amount);
  const largestTrade = sortedTrades[0];
  const averageAmount = calculateAverageTradeSize(trades);
  return (largestTrade.amount / averageAmount) - 1;
}

function calculateOverallRisk(data: any) {
  let riskScore = 0;

  // Holder concentration risk
  if (data.holderConcentration.top10Percentage > 80) riskScore += 40;
  else if (data.holderConcentration.top10Percentage > 50) riskScore += 20;

  // Sniper activity risk
  if (data.snipers.length > 20) riskScore += 30;
  else if (data.snipers.length > 10) riskScore += 15;

  // Authority risk
  if (data.authorities?.length > 0) riskScore += 30;

  return {
    score: riskScore,
    level: riskScore > 70 ? 'high' : riskScore > 40 ? 'medium' : 'low'
  };
}