The issue is this component only uses PumpPortal data (usePumpPortalStore) but doesn't have the real-time Helius connection. Let's fix it using our working pattern (2025-02-01 17:42:33):
TypeScript

// TradeHistory.tsx
import { FC, useState, useEffect, useRef } from "react";
import { usePumpPortalStore } from "@/lib/pump-portal-websocket";
import { History, ExternalLink, Copy } from "lucide-react";
import { motion } from "framer-motion";
import { TokenTrade } from "@/types/token";

const HELIUS_API_KEY = process.env.NEXT_PUBLIC_HELIUS_API_KEY;
const HELIUS_WS_URL = `wss://rpc.helius.xyz/?api-key=${HELIUS_API_KEY}`;

interface Props {
  tokenAddress: string;
}

const TradeHistory: FC<Props> = ({ tokenAddress }) => {
  const token = usePumpPortalStore(state => state.getToken(tokenAddress));
  const solPrice = usePumpPortalStore(state => state.solPrice);
  const [trades, setTrades] = useState<TokenTrade[]>([]);
  const ws = useRef<WebSocket | null>(null);

  useEffect(() => {
    // Initialize with PumpPortal trades
    if (token?.recentTrades) {
      setTrades(token.recentTrades);
    }

    // Connect to Helius for real-time updates
    ws.current = new WebSocket(HELIUS_WS_URL);

    ws.current.onopen = () => {
      console.log('[Helius] Trade History Connected');
      ws.current?.send(JSON.stringify({
        jsonrpc: '2.0',
        id: 1,
        method: 'accountSubscribe',
        params: [
          tokenAddress,
          {
            commitment: 'confirmed',
            encoding: 'jsonParsed'
          }
        ]
      }));
    };

    ws.current.onmessage = (event) => {
      try {
        const response = JSON.parse(event.data);
        
        if (response.method === 'accountNotification') {
          const txInfo = response.params.result.value;
          
          // Create new trade from notification
          const newTrade: TokenTrade = {
            timestamp: Date.now(),
            txType: txInfo.tokenAmount > 0 ? 'buy' : 'sell',
            traderPublicKey: txInfo.owner,
            tokenAmount: Math.abs(txInfo.tokenAmount?.uiAmount || 0),
            solAmount: txInfo.lamports / 1e9,
            signature: txInfo.txId,
            mint: tokenAddress,
            priceInUsd: (txInfo.lamports / 1e9) * solPrice,
            vTokensInBondingCurve: token?.vTokensInBondingCurve,
            vSolInBondingCurve: token?.vSolInBondingCurve
          };

          // Add new trade to the list
          setTrades(current => [newTrade, ...current]);
        }
      } catch (error) {
        console.error('[Helius] Trade processing error:', error);
      }
    };

    return () => {
      ws.current?.close();
    };
  }, [tokenAddress, token]);

  const formatTime = (timestamp: number) => {
    return new Date(timestamp).toLocaleTimeString('en-US', {
      hour12: false,
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    });
  };

  if (!trades.length) return null;

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-2">
          <History className="w-5 h-5 text-purple-400" />
          <h2 className="text-lg font-semibold text-purple-100">Trade History</h2>
        </div>
      </div>

      <div className="custom-scrollbar h-[calc(100vh-220px)] overflow-y-auto">
        <div className="grid grid-cols-6 text-xs text-purple-400 pb-2 sticky top-0 bg-[#0D0B1F] p-2">
          <span>Time</span>
          <span>Wallet</span>
          <span className="text-right">Price</span>
          <span className="text-right">Amount</span>
          <span className="text-right">SOL</span>
          <span className="text-right">Total</span>
        </div>

        {trades.map((trade, index) => (
          <motion.div
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            key={`${trade.signature}-${index}`}
            className={`grid grid-cols-6 text-xs p-2 hover:bg-purple-900/20 rounded group ${
              index === 0 ? 'animate-highlight' : ''
            }`}
          >
            <span className="text-purple-300">
              {formatTime(trade.timestamp)}
            </span>
            <div className="flex items-center space-x-1">
              <span className={trade.txType === 'buy' ? 'text-green-400' : 'text-red-400'}>
                {trade.traderPublicKey.slice(0, 6)}...{trade.traderPublicKey.slice(-4)}
              </span>
              <div className="opacity-0 group-hover:opacity-100 transition-opacity flex items-center gap-1">
                <button
                  onClick={() => navigator.clipboard.writeText(trade.traderPublicKey)}
                  className="p-1 hover:bg-purple-900/40 rounded"
                >
                  <Copy className="w-3 h-3 text-purple-400" />
                </button>
                <a
                  href={`https://solscan.io/tx/${trade.signature}`}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="p-1 hover:bg-purple-900/40 rounded"
                >
                  <ExternalLink className="w-3 h-3 text-purple-400" />
                </a>
              </div>
            </div>
            <span className="text-right text-purple-300">
              ${trade.priceInUsd?.toFixed(8)}
            </span>
            <span className="text-right text-purple-300">
              {trade.tokenAmount.toLocaleString(undefined, { maximumFractionDigits: 2 })}
            </span>
            <span className="text-right text-purple-300">
              {trade.solAmount.toFixed(3)}
            </span>
            <span className="text-right text-purple-300">
              ${(trade.solAmount * (trade.priceInUsd || 0)).toFixed(2)}
            </span>
          </motion.div>
        ))}
      </div>
    </div>
  );
};

// Add this to your global CSS
const styles = `
  @keyframes highlight {
    0% {
      background-color: rgba(147, 51, 234, 0.2);
    }
    100% {
      background-color: transparent;
    }
  }

  .animate-highlight {
    animation: highlight 1s ease-out;
  }
`;

export default TradeHistory;

Key changes:

    Added Helius WebSocket connection
    Added state for trades
    Combined PumpPortal + real-time trades
    Added highlight animation for new trades
    Proper error handling
