First, create these files:

    PROPER HELIUS IMPLEMENTATION:

TypeScript

// lib/helius/config.ts
export const HELIUS_CONFIG = {
  API_KEY: process.env.NEXT_PUBLIC_HELIUS_API_KEY!,
  WS_URL: `wss://rpc.helius.xyz/?api-key=${process.env.NEXT_PUBLIC_HELIUS_API_KEY}`,
  API_URL: 'https://api.helius.xyz/v0'
};

// lib/helius/types.ts
export interface HeliusTokenTransaction {
  signature: string;
  timestamp: number;
  type: 'buy' | 'sell';
  tokenAmount: number;
  solAmount: number;
  fee: number;
  feePayer: string;
  accountData: {
    account: string;
    preBalance: number;
    postBalance: number;
  }[];
}

// lib/helius/client.ts
import { Connection } from '@solana/web3.js';
import { HELIUS_CONFIG } from './config';
import { HeliusTokenTransaction } from './types';

class HeliusClient {
  private connection: Connection;
  private subscriptions: Map<string, number> = new Map();

  constructor() {
    this.connection = new Connection(HELIUS_CONFIG.WS_URL);
  }

  async getTokenTransactions(tokenAddress: string): Promise<HeliusTokenTransaction[]> {
    const response = await fetch(`${HELIUS_CONFIG.API_URL}/token-transactions`, {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${HELIUS_CONFIG.API_KEY}`
      },
      body: JSON.stringify({
        tokenAddress,
        type: "ALL",
        limit: 100
      })
    });

    return await response.json();
  }

  async subscribeToTokenTransactions(
    tokenAddress: string, 
    onTransaction: (tx: HeliusTokenTransaction) => void
  ): Promise<number> {
    const subId = await this.connection.onAccountChange(
      new PublicKey(tokenAddress),
      async (accountInfo) => {
        // Get latest transaction
        const signatures = await this.connection.getSignaturesForAddress(
          new PublicKey(tokenAddress),
          { limit: 1 }
        );

        if (signatures[0]) {
          const tx = await this.connection.getParsedTransaction(
            signatures[0].signature,
            { maxSupportedTransactionVersion: 0 }
          );

          if (tx) {
            const parsedTx = this.parseTransaction(tx);
            onTransaction(parsedTx);
          }
        }
      },
      'confirmed'
    );

    this.subscriptions.set(tokenAddress, subId);
    return subId;
  }

  private parseTransaction(tx: any): HeliusTokenTransaction {
    // Extract relevant data from transaction
    const tokenTransfer = tx.meta?.innerInstructions?.[0]?.instructions.find(
      (ix: any) => ix.program === 'spl-token'
    );

    return {
      signature: tx.transaction.signatures[0],
      timestamp: tx.blockTime! * 1000,
      type: this.determineTransactionType(tx),
      tokenAmount: parseFloat(tokenTransfer?.parsed?.info?.amount || '0'),
      solAmount: tx.meta?.fee / 1e9,
      fee: tx.meta?.fee,
      feePayer: tx.transaction.message.accountKeys[0].pubkey.toString(),
      accountData: tx.meta?.postBalances.map((post: number, i: number) => ({
        account: tx.transaction.message.accountKeys[i].pubkey.toString(),
        preBalance: tx.meta?.preBalances[i],
        postBalance: post
      }))
    };
  }

  private determineTransactionType(tx: any): 'buy' | 'sell' {
    // Implement your logic to determine if it's a buy or sell
    // based on token movement direction
    return 'buy'; // Placeholder
  }

  unsubscribe(tokenAddress: string) {
    const subId = this.subscriptions.get(tokenAddress);
    if (subId) {
      this.connection.removeAccountChangeListener(subId);
      this.subscriptions.delete(tokenAddress);
    }
  }
}

export const heliusClient = new HeliusClient();

    REPLACE MOCK DATA WITH REAL DATA:

TypeScript

// lib/stores/token-store.ts
import create from 'zustand';
import { heliusClient } from '../helius/client';

interface TokenStore {
  tokens: Record<string, {
    transactions: HeliusTokenTransaction[];
    lastPrice: number;
    volume24h: number;
  }>;
  subscribeToToken: (address: string) => Promise<void>;
  unsubscribeFromToken: (address: string) => void;
  addTransaction: (address: string, tx: HeliusTokenTransaction) => void;
}

export const useTokenStore = create<TokenStore>((set, get) => ({
  tokens: {},

  subscribeToToken: async (address: string) => {
    // Get initial transactions
    const transactions = await heliusClient.getTokenTransactions(address);
    
    // Setup subscription
    await heliusClient.subscribeToTokenTransactions(address, (tx) => {
      get().addTransaction(address, tx);
    });

    // Update store
    set((state) => ({
      tokens: {
        ...state.tokens,
        [address]: {
          transactions,
          lastPrice: calculateLastPrice(transactions),
          volume24h: calculateVolume24h(transactions)
        }
      }
    }));
  },

  unsubscribeFromToken: (address: string) => {
    heliusClient.unsubscribe(address);
  },

  addTransaction: (address: string, tx: HeliusTokenTransaction) => {
    set((state) => {
      const token = state.tokens[address];
      if (!token) return state;

      const newTransactions = [tx, ...token.transactions].slice(0, 100);
      
      return {
        tokens: {
          ...state.tokens,
          [address]: {
            ...token,
            transactions: newTransactions,
            lastPrice: calculateLastPrice(newTransactions),
            volume24h: calculateVolume24h(newTransactions)
          }
        }
      };
    });
  }
}));

function calculateLastPrice(txs: HeliusTokenTransaction[]): number {
  return txs[0]?.solAmount || 0;
}

function calculateVolume24h(txs: HeliusTokenTransaction[]): number {
  const now = Date.now();
  const oneDayAgo = now - 24 * 60 * 60 * 1000;
  
  return txs
    .filter(tx => tx.timestamp > oneDayAgo)
    .reduce((sum, tx) => sum + tx.solAmount, 0);
}

    UPDATE UI COMPONENTS:

TypeScript

// components/TradeHistory.tsx
import { useTokenStore } from '@/lib/stores/token-store';

const TradeHistory: React.FC<{ tokenAddress: string }> = ({ tokenAddress }) => {
  const transactions = useTokenStore(
    (state) => state.tokens[tokenAddress]?.transactions || []
  );

  useEffect(() => {
    // Subscribe when component mounts
    useTokenStore.getState().subscribeToToken(tokenAddress);
    
    // Cleanup on unmount
    return () => {
      useTokenStore.getState().unsubscribeFromToken(tokenAddress);
    };
  }, [tokenAddress]);

  return (
    <div className="bg-[#0D0B1F] rounded-lg border border-purple-900/30">
      {/* Your existing UI code but using transactions instead of trades */}
      <AnimatePresence initial={false}>
        {transactions.map((tx) => (
          <motion.div
            key={tx.signature}
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, height: 0 }}
            transition={{ duration: 0.2 }}
          >
            {/* Your existing trade row UI but using tx data */}
          </motion.div>
        ))}
      </AnimatePresence>
    </div>
  );
};

export default React.memo(TradeHistory);

This implementation:

    Uses REAL Helius data
    Has proper WebSocket subscriptions
    Updates in real-time
    Handles cleanup properly
