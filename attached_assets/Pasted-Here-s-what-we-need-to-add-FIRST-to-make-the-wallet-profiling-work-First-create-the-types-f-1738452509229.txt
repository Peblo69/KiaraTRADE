Here's what we need to add FIRST to make the wallet profiling work:

    First, create the types file:

TypeScript

// types/wallet-profile.ts
export interface WalletProfile {
  type: 'whale' | 'bot' | 'dev' | 'paper' | 'diamond' | 'unknown';
  confidence: number;
  traits: string[];
  stats: {
    totalVolume: number;
    tradeCount: number;
    avgTradeSize: number;
    lastActive: Date;
    firstSeen: Date;
  };
}

    Add this to your PumpPortal store:

TypeScript

// lib/pump-portal-websocket.ts
interface PumpPortalState {
  // ... your existing state
  walletProfiles: Map<string, WalletProfile>;
  addWalletProfile: (address: string, profile: WalletProfile) => void;
}

export const usePumpPortalStore = create<PumpPortalState>((set, get) => ({
  // ... your existing store
  walletProfiles: new Map(),
  addWalletProfile: (address, profile) => 
    set(state => ({
      walletProfiles: new Map(state.walletProfiles).set(address, profile)
    })),
}));

    Then create the profiler service:

TypeScript

// services/wallet-profiler.ts
import { WalletProfile } from '@/types/wallet-profile';
import { usePumpPortalStore } from '@/lib/pump-portal-websocket';

export class WalletProfiler {
  private static instance: WalletProfiler;
  private cache: Map<string, WalletProfile> = new Map();

  // Make it a singleton
  public static getInstance(): WalletProfiler {
    if (!WalletProfiler.instance) {
      WalletProfiler.instance = new WalletProfiler();
    }
    return WalletProfiler.instance;
  }

  public async profileWallet(address: string): Promise<WalletProfile> {
    // Check cache first
    if (this.cache.has(address)) {
      return this.cache.get(address)!;
    }

    // Get trades from your store
    const store = usePumpPortalStore.getState();
    const token = store.activeTokenView;
    if (!token) return this.getDefaultProfile(address);

    const trades = token.recentTrades.filter(
      t => t.traderPublicKey === address
    );

    const profile = {
      type: 'unknown' as const,
      confidence: 0,
      traits: [],
      stats: {
        totalVolume: trades.reduce((sum, t) => sum + t.solAmount, 0),
        tradeCount: trades.length,
        avgTradeSize: trades.reduce((sum, t) => sum + t.solAmount, 0) / trades.length,
        lastActive: new Date(Math.max(...trades.map(t => t.timestamp))),
        firstSeen: new Date(Math.min(...trades.map(t => t.timestamp)))
      }
    };

    // Basic profiling for now
    if (profile.stats.totalVolume > 100) {
      profile.type = 'whale';
      profile.confidence = 80;
      profile.traits.push('high_volume');
    }

    // Cache it
    this.cache.set(address, profile);
    store.addWalletProfile(address, profile);

    return profile;
  }

  private getDefaultProfile(address: string): WalletProfile {
    return {
      type: 'unknown',
      confidence: 0,
      traits: [],
      stats: {
        totalVolume: 0,
        tradeCount: 0,
        avgTradeSize: 0,
        lastActive: new Date(),
        firstSeen: new Date()
      }
    };
  }
}

    Finally, modify your TradeHistory to use it:

TypeScript

// components/TradeHistory.tsx
import { WalletProfiler } from '@/services/wallet-profiler';

const TradeHistory: FC<Props> = ({ tokenAddress }) => {
  const { trades, isLoading } = useTradeHistory(tokenAddress);
  const walletProfiles = usePumpPortalStore(state => state.walletProfiles);
  const profiler = WalletProfiler.getInstance();

  useEffect(() => {
    const newWallets = trades
      .map(t => t.traderPublicKey)
      .filter(wallet => !walletProfiles.has(wallet));

    if (newWallets.length === 0) return;

    // Profile new wallets
    newWallets.forEach(wallet => {
      profiler.profileWallet(wallet).catch(console.error);
    });
  }, [trades]);

  // ... rest of your component
};