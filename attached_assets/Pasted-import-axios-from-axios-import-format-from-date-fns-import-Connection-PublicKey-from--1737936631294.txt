import axios from 'axios';
import { format } from 'date-fns';
import { Connection, PublicKey } from '@solana/web3.js';
import dotenv from 'dotenv';

dotenv.config();

const HELIUS_API_KEY = process.env.HELIUS_API_KEY;
const RPC_URL = `https://mainnet.helius-rpc.com/?api-key=${HELIUS_API_KEY}`;

interface TokenTrade {
    time: number;
    price: number;
    volume: number;
    type: 'buy' | 'sell';
}

class PumpFunTokenTracker {
    private connection: Connection;
    private trades: TokenTrade[] = [];
    private lastPrice: number = 0;
    private tokenMint: string;

    constructor(tokenMint: string) {
        this.connection = new Connection(RPC_URL);
        this.tokenMint = tokenMint;
    }

    async trackTransactions() {
        try {
            // Get recent transactions for the token
            const response = await axios.post(RPC_URL, {
                jsonrpc: '2.0',
                id: 'my-id',
                method: 'getSignaturesForAddress',
                params: [
                    this.tokenMint,
                    {
                        limit: 100,
                        commitment: 'confirmed'
                    }
                ]
            });

            // Process each transaction
            for (const tx of response.data.result) {
                const txData = await this.getTransactionData(tx.signature);
                if (txData) {
                    this.trades.push(txData);
                }
            }

            // Calculate real-time price
            this.calculateCurrentPrice();

            return {
                currentPrice: this.lastPrice,
                recentTrades: this.trades.slice(-10), // Last 10 trades
                volumeLast24h: this.calculateVolume24h()
            };

        } catch (error) {
            console.error('Error tracking transactions:', error);
            return null;
        }
    }

    private async getTransactionData(signature: string): Promise<TokenTrade | null> {
        try {
            const response = await axios.post(RPC_URL, {
                jsonrpc: '2.0',
                id: 'my-id',
                method: 'getTransaction',
                params: [
                    signature,
                    { maxSupportedTransactionVersion: 0 }
                ]
            });

            const tx = response.data.result;
            if (!tx || !tx.meta || !tx.meta.preTokenBalances || !tx.meta.postTokenBalances) {
                return null;
            }

            // Calculate price and volume from token balances
            const preBalances = tx.meta.preTokenBalances;
            const postBalances = tx.meta.postTokenBalances;
            
            // Calculate price based on SOL amount changes
            const solChange = tx.meta.postBalances[0] - tx.meta.preBalances[0];
            const tokenChange = this.calculateTokenChange(preBalances, postBalances);

            if (tokenChange === 0) return null;

            const price = Math.abs(solChange / tokenChange);
            const volume = Math.abs(tokenChange);
            const type = tokenChange > 0 ? 'buy' : 'sell';

            return {
                time: tx.blockTime * 1000,
                price,
                volume,
                type
            };

        } catch (error) {
            console.error('Error getting transaction data:', error);
            return null;
        }
    }

    private calculateTokenChange(pre: any[], post: any[]): number {
        const preAmount = pre.find((b: any) => b.mint === this.tokenMint)?.uiTokenAmount?.uiAmount || 0;
        const postAmount = post.find((b: any) => b.mint === this.tokenMint)?.uiTokenAmount?.uiAmount || 0;
        return postAmount - preAmount;
    }

    private calculateCurrentPrice(): number {
        if (this.trades.length === 0) return 0;

        // Use weighted average of recent trades
        const recentTrades = this.trades.slice(-5);
        const totalVolume = recentTrades.reduce((sum, trade) => sum + trade.volume, 0);
        const weightedPrice = recentTrades.reduce((sum, trade) => 
            sum + (trade.price * (trade.volume / totalVolume)), 0);

        this.lastPrice = weightedPrice;
        return weightedPrice;
    }

    private calculateVolume24h(): number {
        const oneDayAgo = Date.now() - 24 * 60 * 60 * 1000;
        return this.trades
            .filter(trade => trade.time >= oneDayAgo)
            .reduce((sum, trade) => sum + trade.volume, 0);
    }

    // Live monitoring
    async startLiveMonitoring(updateCallback: (data: any) => void) {
        // Initial data fetch
        await this.trackTransactions();

        // Subscribe to account changes
        const tokenAccount = new PublicKey(this.tokenMint);
        this.connection.onAccountChange(
            tokenAccount,
            async () => {
                await this.trackTransactions();
                const data = {
                    price: this.lastPrice,
                    recentTrades: this.trades.slice(-10),
                    volume24h: this.calculateVolume24h(),
                    timestamp: Date.now()
                };
                updateCallback(data);
            },
            'confirmed'
        );
    }
}

// Example usage:
async function main() {
    const tokenMint = '87asvmcpuXLVgUMVKvcskmZ6pgq3hK8QsQKBncApump'; // Your Pump.fun token
    const tracker = new PumpFunTokenTracker(tokenMint);

    // Start live monitoring
    tracker.startLiveMonitoring((data) => {
        console.log('\n=== Token Update ===');
        console.log(`Time: ${format(data.timestamp, 'yyyy-MM-dd HH:mm:ss')}`);
        console.log(`Current Price: ${data.price.toFixed(9)} SOL`);
        console.log(`24h Volume: ${data.volume24h.toFixed(2)} tokens`);
        console.log('\nRecent Trades:');
        data.recentTrades.forEach((trade: TokenTrade) => {
            const emoji = trade.type === 'buy' ? 'ðŸŸ¢' : 'ðŸ”´';
            console.log(`${emoji} ${format(trade.time, 'HH:mm:ss')} - ${trade.price.toFixed(9)} SOL (${trade.volume.toFixed(2)} tokens)`);
        });
    });
}

main();