import { Server as HttpServer } from 'http';
import { WebSocket, WebSocketServer } from 'ws';

// Extend WebSocket type to include isAlive property
declare module 'ws' {
  interface WebSocket {
    isAlive: boolean;
  }
}

export class WebSocketManager {
  private wss: WebSocketServer | null = null;
  private clients: Set<WebSocket> = new Set();
  private heartbeatInterval: NodeJS.Timeout | null = null;

  initialize(server: HttpServer) {
    if (this.wss) {
      console.log('[WebSocket Manager] WebSocket server already initialized');
      return;
    }

    this.wss = new WebSocketServer({
      noServer: true,
      perMessageDeflate: false
    });

    server.on('upgrade', (request, socket, head) => {
      // Skip vite-hmr connections
      if (request.headers['sec-websocket-protocol']?.includes('vite-hmr')) {
        console.log('[WebSocket] Skipping vite-hmr connection');
        return;
      }

      if (!this.wss) return;

      this.wss.handleUpgrade(request, socket, head, (ws) => {
        if (this.clients.has(ws)) {
          console.log('[WebSocket] Connection already exists');
          return; // Prevent multiple connections
        }
        this.wss!.emit('connection', ws, request);
      });
    });

    this.wss.on('connection', (ws: WebSocket) => {
      console.log('[WebSocket Manager] New client connected');
      ws.isAlive = true;
      this.clients.add(ws);

      ws.on('pong', () => {
        ws.isAlive = true;
      });

      ws.on('message', (data) => {
        try {
          const message = JSON.parse(data.toString());
          if (message.type === 'ping') {
            this.sendToClient(ws, { type: 'pong' });
          }
        } catch (error) {
          console.error('[WebSocket Manager] Error processing message:', error);
        }
      });

      ws.on('close', () => {
        console.log('[WebSocket Manager] Client disconnected');
        this.clients.delete(ws);
      });

      ws.on('error', (error) => {
        console.error('[WebSocket Manager] Client error:', error);
        this.clients.delete(ws);
      });

      this.sendToClient(ws, {
        type: 'connection_status',
        status: 'connected'
      });
    });

    this.heartbeatInterval = setInterval(() => {
      Array.from(this.clients).forEach(client => {
        if (client.isAlive === false) {
          this.clients.delete(client);
          client.terminate();
          return;
        }
        client.isAlive = false;
        client.ping();
      });
    }, 30000);

    this.wss.on('close', () => {
      if (this.heartbeatInterval) {
        clearInterval(this.heartbeatInterval);
        this.heartbeatInterval = null;
      }
    });

    console.log('[WebSocket Manager] WebSocket server initialized');
  }

  // ... remaining functions unchanged
}