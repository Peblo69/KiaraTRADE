Here’s the Reasoning:
Identify Real Cause of Startup Issues:

If something in your current code is unintentionally causing repeated timeouts, reconnection failures, or firewall blocks, that same issue might still appear even with a different WebSocket solution.
Logging exact errors and step-by-step behavior during startup can uncover simple root causes (e.g., a DNS mismatch or a permissions error).
Avoid Potential Over-Engineering:

Completely switching to a different WebSocket library or approach (like Socket.IO, SSE, or a custom backoff strategy) can be time-consuming.
If the underlying problem is misconfiguration or an external environment issue, the same error would surface again.
If the Investigation Shows a Fundamental Design Flaw:

Only then is it worth considering a more robust approach—maybe a library with built-in reconnection/backoff logic, or a single aggregator vs. multiple direct connections.
Recommended Steps to Pinpoint the Problem
Enable Verbose Logging:

In your WebSocket onopen, onclose, onerror, and onmessage handlers, log timestamps, error codes, and the current state of your store.
This will show you exactly when connections drop and how often reconnection attempts happen.
Temporarily Remove Reconnect Loops:

Try running the app with no reconnect logic (just connect once). If the connection fails at startup, you’ll at least see the reason (e.g., net::ERR_SSL_PROTOCOL_ERROR).
If it connects fine without auto-reconnect, then you know the reconnection logic might be interfering in some unexpected way.
Try a Local WebSocket Proxy or Test Endpoint:

If you can’t reliably connect to the production WebSocket, test against a known good local or public echo server (wss://echo.websocket.org, for example).
If that works perfectly, you’ll know your code is at least structurally sound, and you can narrow it down to environment/network specifics.
Check Firewalls, SSL Issues, or DNS Problems:

Verify that wss://pump.fun/ws/v1 and wss://pumpportal.fun/api/data can be reached from your environment.
If they’re behind Cloudflare or similar, ensure the handshake doesn’t get blocked.
Conclusion
It’s almost always better to figure out why the current changes aren’t effective before switching approaches altogether. That might just mean adding more diagnostic logs, removing or simplifying reconnection loops for debugging, and confirming the endpoints are actually reachable.

Only if you discover a core design flaw—and not just an environmental or minor code bug—would you invest effort in a different WebSocket solution or approach.