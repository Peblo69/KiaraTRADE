Step 2: Wallet Dashboard (Main Page)
This page shows everything the user needs for wallet management in a clean, responsive UI.

Dashboard Layout:
Portfolio Overview Section (Top)
Shows:
Total Balance (calculated in SOL and USD equivalent).
List of tokens and balances (e.g., SOL, USDC, custom tokens).
Display market data such as current SOL price, fetched via API (Dexscreener or Helius).
Token List Table:
Columns:

Token Name
Symbol
Balance
USD Value
Actions (Withdraw/Deposit)
Clicking a token row opens a token details page/modal showing:

Recent transactions
Price history
PNL (Profit and Loss over time)
Action Buttons:
Withdraw Button:
Opens a withdrawal menu:
Input Fields:
Amount to withdraw
Recipient wallet address
Transaction Fee Options:
Regular or priority fee (bribe for faster confirmation).
Submit Button: Executes the withdrawal.
Post-action Feedback:
If successful: "Withdrawal successful. Transaction ID: [link]"
If failed: "Invalid balance. Check your available funds."
Deposit Button:
Displays the user's public wallet address and a QR code for easy deposit.
Option to copy address to clipboard.
Deposit Tracker:
Real-time update on deposits via WebSocket (Helius API).
Send Button (Optional for Later Expansion):
Opens a form for sending tokens to another wallet.
Input Fields:
Token selection
Amount
Recipient address
Optional note field
Additional Features for Wallet Management:
Transaction History Table:
Columns: Date, Transaction Type (Deposit/Withdraw), Amount, Status
Transactions are fetched and displayed in real-time.
Each row can expand to show more details (e.g., fees, transaction hash).
Settings and Wallet Info:
Option to rename the wallet (for display purposes only).
Export Wallet: Allows users to export a backup JSON file again.
Option to delete or archive the wallet (with confirmation).
Menu Navigation:
Wallet Selector:
If multiple wallets exist, users can switch between them with a dropdown or tabs.
Button to add a new wallet (brings up create/import modal again).
Responsive Design:
Mobile-friendly layout with collapsible sections.
Smooth transitions between menus (React-style animations).
Ensure critical information (like balances) is easily readable on smaller screens.