I'll provide the upgraded code files with key improvements. Let's start with the critical fix for the TradingView chart (likely due to data formatting issues):

1. FILE: /src/lib/pump-portal-websocket.ts
Changes:

typescript
Copy
// Added proper data formatting for TradingView
interface Trade {
  timestamp: number;
  price: number;
  volume: number;
  isBuy: boolean;
}

// Modified addTradeToHistory to format data for charts
addTradeToHistory: (address, trade) =>
  set((state) => {
    // ... existing code ...
    
    // Format price history for TradingView (OHLC format)
    const ohlcData = {
      time: Math.floor(now / 1000), // TradingView expects seconds
      open: previousPrice,
      high: Math.max(previousPrice, newPrice),
      low: Math.min(previousPrice, newPrice),
      close: newPrice,
      volume: tradeVolume
    };

    return {
      tokens: state.tokens.map(t =>
        t.address === address ? {
          ...t,
          priceHistory: {
            ...t.priceHistory,
            '5m': [...(t.priceHistory['5m'] || []).slice(-300), ohlcData]
          },
          // ... rest of updates ...
        } : t
      )
    };
  }),
2. FILE: /src/components/TradingViewChart.tsx (NEW)
typescript
Copy
import React, { useEffect, useRef } from 'react';
import { widget } from '../../public/charting_library/charting_library';

export default function TradingViewChart({ trades }: { trades: any[] }) {
  const chartContainerRef = useRef<HTMLDivElement>(null);
  
  useEffect(() => {
    if (!chartContainerRef.current || trades.length === 0) return;

    const chart = new widget({
      container: chartContainerRef.current,
      symbol: 'Custom Token',
      interval: '5',
      datafeed: {
        onReady: (callback) => {
          callback({
            supported_resolutions: ['1', '5', '15', '60', '1D'],
            supports_marks: false,
            supports_timescale_marks: false,
          });
        },
        resolveSymbol: (symbolName, onSymbolResolvedCallback) => {
          onSymbolResolvedCallback({
            name: 'Token Price',
            pricescale: 1000000,
            minmov: 1,
            timezone: 'Etc/UTC',
            session: '24x7',
            has_intraday: true,
            supported_resolutions: ['1', '5', '15', '60', '1D'],
            volume_precision: 2,
            data_status: 'streaming',
          });
        },
        getBars: (symbolInfo, resolution, from, to, onHistoryCallback) => {
          try {
            const bars = trades.map(trade => ({
              time: trade.timestamp / 1000,
              open: trade.price,
              high: trade.price,
              low: trade.price,
              close: trade.price,
              volume: trade.volume
            }));
            
            onHistoryCallback(bars, { noData: !bars.length });
          } catch (error) {
            console.error('Error generating bars:', error);
          }
        },
      },
      library_path: '/charting_library/',
      locale: 'en',
      disabled_features: ['header_widget', 'left_toolbar'],
      enabled_features: ['hide_left_toolbar_by_default'],
      charts_storage_url: 'https://saveload.tradingview.com',
      height: 500,
      fullscreen: false,
      autosize: true,
    });

    return () => {
      chart.remove();
    };
  }, [trades]);

  return <div ref={chartContainerRef} className="h-[500px] w-full" />;
}
3. FILE: /src/lib/token-metadata.ts
Changes:

typescript
Copy
// Added caching and better error handling
const IMAGE_CACHE = new Map<string, string>();
const METADATA_CACHE = new Map<string, any>();

export async function fetchTokenMetadata(metadataUri: string): Promise<string | undefined> {
  const httpUrl = transformUri(metadataUri);
  
  // Check cache first
  if (METADATA_CACHE.has(httpUrl)) {
    return METADATA_CACHE.get(httpUrl)?.image;
  }

  try {
    const controller = new AbortController();
    const timeout = setTimeout(() => controller.abort(), 5000);
    
    const response = await fetch(httpUrl, { signal: controller.signal });
    clearTimeout(timeout);
    
    const metadata = await response.json();
    
    if (metadata?.image) {
      const imageUrl = transformUri(metadata.image);
      METADATA_CACHE.set(httpUrl, { image: imageUrl });
      return imageUrl;
    }
  } catch (error) {
    console.error('Metadata fetch error:', error);
  }
  return undefined;
}

export async function getTokenImage(token: { imageLink?: string; symbol: string }): Promise<string> {
  const cacheKey = token.imageLink || token.symbol;
  
  // Check image cache
  if (IMAGE_CACHE.has(cacheKey)) {
    return IMAGE_CACHE.get(cacheKey)!;
  }

  let finalUrl = 'https://via.placeholder.com/150';
  
  if (token.imageLink) {
    // ... existing logic ...
    IMAGE_CACHE.set(cacheKey, finalUrl);
  }
  
  return finalUrl;
}
4. FILE: /src/pages/pumpfun-vision.tsx
Chart Fix:

typescript
Copy
// Updated TradingViewChart usage
<TradingViewChart trades={currentToken.recentTrades.map(t => ({
  timestamp: t.timestamp,
  price: t.price,
  volume: t.volume
}))} />

// Added loading state
{!currentToken.recentTrades.length && (
  <div className="flex items-center justify-center h-full">
    <Loader2 className="h-8 w-8 animate-spin text-purple-500" />
  </div>
)}
5. FILE: /src/lib/helius-websocket.ts
Critical Fix:

typescript
Copy
// Added proper trade data formatting
interface TokenTrade {
  timestamp: number;
  price: number;
  volume: number;
  // ... other fields ...
}

// Updated addTrade to match expected format
addTrade: (tokenAddress, trade) => {
  const formattedTrade = {
    timestamp: trade.timestamp,
    price: trade.priceUsd,
    volume: trade.amount,
    isBuy: trade.type === 'buy'
  };
  
  // Update both stores
  usePumpPortalStore.getState().addTradeToHistory(tokenAddress, formattedTrade);
  
  // ... rest of existing code ...
}
To Fix TradingView Chart:

Create a /public/charting_library folder with TradingView library files

Ensure trades are formatted with:

timestamp in milliseconds

price as number

volume as number

Add proper CSS container sizing

Handle initial loading states

The main chart fix was in the data formatting and proper library initialization. Let me know if you need help with the TradingView library setup or any other specific implementation details!