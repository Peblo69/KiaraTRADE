The error message indicates that the query you're trying to execute is invalid for the Bitquery API. Specifically, the Solana field does not exist in the schema as you're using it. This is likely because Bitquery expects specific queries for Solana data, and the example query { Solana { blockchain { blocks(limit: 1) { blockNumber } } } } does not match their schema.

Correct Query Format
Here's a query that works with Bitquery's Solana schema for testing purposes:

graphql
Copy
Edit
query {
  Solana {
    DEXTrades(
      limit: 1
      orderBy: { descending: Block_Time }
      where: { Trade: { Dex: { ProtocolName: { is: "pump" } } } }
    ) {
      Block {
        Time
      }
      Trade {
        Currency {
          Name
          Symbol
          MintAddress
        }
        Price
      }
    }
  }
}
Corrected Code
Update your test query to something valid for Bitquery, like the above example:

typescript
Copy
Edit
import { FC, useEffect } from "react";
import Navbar from "@/components/Navbar";
import DebugConsole from "@/components/DebugConsole";

const ProjectPage: FC = () => {
  useEffect(() => {
    console.log('Testing BitQuery API connection...');
    (window as any).debugConsole?.log('Starting BitQuery API test...');

    fetch('https://graphql.bitquery.io', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-API-KEY': 'BQYSaASLeyNPxRf38DGgENQ1mVHxNypq',
      },
      body: JSON.stringify({
        query: `
          query {
            Solana {
              DEXTrades(
                limit: 1
                orderBy: { descending: Block_Time }
                where: { Trade: { Dex: { ProtocolName: { is: "pump" } } } }
              ) {
                Block {
                  Time
                }
                Trade {
                  Currency {
                    Name
                    Symbol
                    MintAddress
                  }
                  Price
                }
              }
            }
          }
        `,
      }),
    })
      .then((res) => res.json())
      .then((data) => {
        console.log('API Key Test Result:', data);
        (window as any).debugConsole?.success(`API Test Success: ${JSON.stringify(data, null, 2)}`);
      })
      .catch((err) => {
        console.error('API Key Test Error:', err);
        (window as any).debugConsole?.error(`API Test Failed: ${err.message}`);
      });
  }, []);

  return (
    <div className="min-h-screen bg-black">
      <Navbar />
      <div className="container mx-auto px-4 py-8">
        <h1 className="text-2xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-purple-400 to-purple-600">
          BitQuery API Test Page
        </h1>
        <p className="text-gray-400 mt-4">Check the debug console in the bottom right corner for test results</p>
      </div>
      <DebugConsole />
    </div>
  );
};

export default ProjectPage;
How It Works
Valid Query: The corrected query fetches the latest DEX trade on PumpFun to ensure the API key and schema work.
Logs:
Success or failure is logged in the console and the DebugConsole component.
Error Handling: Catches network or schema-related errors.
Next Steps
Test the Query:
Verify that the API key and endpoint are working correctly with the updated query.
Validate the Schema:
Ensure the query aligns with Bitquery's documentation. You can verify this using their GraphQL Explorer.
Log Detailed Errors:
If the error persists, log the raw response from Bitquery to inspect for details:
typescript
Copy
Edit
.then((res) => res.text())
.then((text) => console.log('API Raw Response:', text));