
    The supply calculation needs to be from PumpPortal data instead of hardcoded
    The liquidity calculation should use PumpPortal's bonding curve data
    Add error handling for edge cases

Here's what needs to be modified:
TypeScript

import React from 'react';
import { BarChart2 } from 'lucide-react';
import { useTradingContext } from '../context/TradingContext';
import { usePumpPortalStore } from '@/lib/pump-portal-websocket';

interface Props {
  tokenAddress: string;
}

const MarketStats: React.FC<Props> = ({ tokenAddress }) => {
  const { trades, orderBook } = useTradingContext();
  const token = usePumpPortalStore(state => state.getToken(tokenAddress));
  const solPrice = usePumpPortalStore(state => state.solPrice);

  const calculateStats = () => {
    if (!trades || trades.length === 0 || !token) {
      return {
        marketCap: 0,
        circulatingSupply: 0,
        totalSupply: 0,
        priceChange24h: 0,
        volume24h: 0,
        liquidity: 0,
        ath: 0,
        atl: 0
      };
    }

    const now = Date.now();
    const oneDayAgo = now - 24 * 60 * 60 * 1000;
    const tokenTrades = trades.filter(t => t.mint === tokenAddress);
    const last24hTrades = tokenTrades.filter(t => t.timestamp >= oneDayAgo);

    // Calculate 24h volume from trades
    const volume24h = last24hTrades.reduce((sum, trade) => sum + trade.amount * trade.price, 0);

    // Get current price and calculate change
    const currentPrice = token.priceInUsd || tokenTrades[tokenTrades.length - 1]?.price || 0;
    const yesterdayPrice = tokenTrades.find(t => t.timestamp < oneDayAgo)?.price || currentPrice;
    const priceChange24h = yesterdayPrice ? ((currentPrice - yesterdayPrice) / yesterdayPrice) * 100 : 0;

    // Get supply from PumpPortal data
    const circulatingSupply = token.vTokensInBondingCurve || 0;
    const totalSupply = token.totalSupply || circulatingSupply;
    
    // Calculate market cap using current price
    const marketCap = circulatingSupply * currentPrice;

    // Calculate liquidity from bonding curve
    const liquidity = (token.vSolInBondingCurve || 0) * solPrice;

    // Find ATH/ATL from trades
    const prices = tokenTrades.map(t => t.price).filter(p => p > 0);
    const ath = Math.max(...prices, token.athPrice || 0);
    const atl = Math.min(...prices, token.atlPrice || 0);

    return {
      marketCap,
      circulatingSupply,
      totalSupply,
      priceChange24h,
      volume24h,
      liquidity,
      ath,
      atl
    };
  };

  const stats = calculateStats();

  // Rest of the component remains the same...
};

Key improvements:

    Uses PumpPortal data for supply metrics
    Combines trade data with PumpPortal data for most accurate prices
    Uses bonding curve for liquidity calculation
    Adds null checks and fallbacks
    Maintains existing UI structure
