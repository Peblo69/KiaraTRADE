import { create } from 'zustand';
import { preloadTokenImages } from './token-metadata';
import axios from 'axios';

// Constants 
const SOL_PRICE_UPDATE_INTERVAL = 10000;
const MAX_TRADES_PER_TOKEN = 100;
const WS_URL = `${window.location.protocol === 'https:' ? 'wss:' : 'ws:'}//${window.location.host}/ws`;
const RECONNECT_DELAY = 5000;
const MAX_RECONNECT_ATTEMPTS = 5;

// We assume your tokens use 9 decimals:
const TOKEN_DECIMALS = 9;

export interface TokenTrade {
  signature: string;
  timestamp: number;
  price: number;     // price per token in SOL
  priceUsd: number;  // price per token in USD
  amount: number;    // how many SOL were exchanged (always positive)
  type: 'buy' | 'sell';
  buyer: string;
  seller: string;
}

export interface PumpPortalToken {
  symbol: string;
  name: string;
  address: string;

  // Current displayed price (we'll store the *latest fill price* in SOL & USD)
  price: number;     // SOL per token
  priceUsd: number;  // USD per token

  marketCap: number; // in USD
  liquidity: number; // in USD
  volume: number;    // cumulative volume in USD
  volume24h: number; // 24h volume in USD
  trades: number;    // total number of trades
  trades24h: number;
  buys24h: number;
  sells24h: number;
  walletCount: number;

  recentTrades: TokenTrade[];
  imageLink?: string;
}

interface PumpPortalStore {
  tokens: PumpPortalToken[];
  isConnected: boolean;
  solPrice: number;
  addToken: (token: PumpPortalToken) => void;
  updateToken: (address: string, updates: Partial<PumpPortalToken>) => void;
  addTradeToHistory: (address: string, trade: any) => void;
  setConnected: (connected: boolean) => void;
  setSolPrice: (price: number) => void;
}

export const usePumpPortalStore = create<PumpPortalStore>((set, get) => ({
  tokens: [],
  isConnected: false,
  solPrice: 0,

  addToken: (token) =>
    set((state) => ({
      tokens: [token, ...state.tokens].slice(0, 50),
    })),

  updateToken: (address, updates) =>
    set((state) => ({
      tokens: state.tokens.map((token) =>
        token.address === address ? { ...token, ...updates } : token
      ),
    })),

  addTradeToHistory: (address, trade) => {
    const state = get();
    const token = state.tokens.find((t) => t.address === address);
    if (!token || !state.solPrice) return;

    const now = Date.now();

    // 1) SOL spent or received in this trade
    //    If `trade.solAmount` is already in SOL (not lamports), we can use it directly:
    const solAmount = Number(trade.solAmount || 0);

    // 2) Token amount with decimals
    //    If your token has 9 decimals, convert:
    const rawTokenAmount = Number(trade.tokenAmount || 0);
    const userTokenAmount = rawTokenAmount / 10 ** TOKEN_DECIMALS;

    const isBuy = trade.txType === 'buy';

    // 3) Actual fill price => how many SOL per token
    let actualTradePriceSol = 0;
    if (userTokenAmount > 0) {
      actualTradePriceSol = solAmount / userTokenAmount;
    }
    const actualTradePriceUsd = actualTradePriceSol * state.solPrice;

    // 4) Extract bonding-curve data, also in decimals
    const rawVTokens = Number(trade.vTokensInBondingCurve || 0);
    const vTokens = rawVTokens / 10 ** TOKEN_DECIMALS; // total tokens in curve
    const vSol = Number(trade.vSolInBondingCurve || 0); // total SOL in curve

    // If your backend updates these after each trade, you can compute new "bondingCurvePriceSol":
    const bondingCurvePriceSol = vTokens > 0 ? vSol / vTokens : 0;
    const bondingCurvePriceUsd = bondingCurvePriceSol * state.solPrice;

    // 5) Market cap, liquidity, volume, etc.
    const marketCapSol = Number(trade.marketCapSol || 0);
    const marketCapUsd = marketCapSol * state.solPrice;
    const liquidityUsd = vSol * state.solPrice;

    // We'll count the USD volume for each trade as (SOL spent) * (SOL Price in USD):
    const tradeVolumeUsd = solAmount * state.solPrice;

    // Validate addresses
    const buyerAddress = isBuy ? trade.traderPublicKey : trade.counterpartyPublicKey;
    const sellerAddress = isBuy ? trade.counterpartyPublicKey : trade.traderPublicKey;

    const isValidSolanaAddress = (addr?: string) =>
      !!addr && (addr.length === 44 || addr.length === 43);

    if (!isValidSolanaAddress(buyerAddress) && !isValidSolanaAddress(sellerAddress)) {
      console.warn('[PumpPortal] Invalid wallet addresses in trade:', {
        buyerAddress,
        sellerAddress,
      });
      return;
    }

    // Debug log the final numbers
    console.log('[Trade Filled]', {
      type: isBuy ? 'buy' : 'sell',
      solAmount,
      userTokenAmount,
      actualTradePriceSol,
      actualTradePriceUsd,
      bondingCurvePriceSol,
      bondingCurvePriceUsd,
      marketCapUsd,
      liquidityUsd,
      tradeVolumeUsd,
    });

    // 6) Build the new trade object
    const newTrade: TokenTrade = {
      signature: trade.signature,
      timestamp: now,
      price: actualTradePriceSol,       // per token in SOL
      priceUsd: actualTradePriceUsd,    // per token in USD
      amount: Math.abs(solAmount),      // how many SOL changed hands
      type: isBuy ? 'buy' : 'sell',
      buyer: buyerAddress,
      seller: sellerAddress,
    };

    // 7) Insert into recent trades
    const recentTrades = [newTrade, ...token.recentTrades].slice(0, MAX_TRADES_PER_TOKEN);

    // 8) Recompute 24-hour trades
    const cutoff24h = now - 24 * 60 * 60 * 1000;
    const trades24h = recentTrades.filter((t) => t.timestamp > cutoff24h);

    // 9) For 24h volume in USD, sum up the SOL side:
    //    i.e. each trade's "amount" is in SOL, so multiply by current SOL Price each time (or the trade's priceUsd if you prefer).
    //    We'll just do a “snapshot” style for each trade:
    const volume24hUsd = trades24h.reduce(
      (sum, tr) => sum + tr.amount * state.solPrice, // each trade's SOL * (SOL Price)
      0
    );

    // Alternatively, if you want exactly what each trade spent at the moment it happened,
    // you could do `sum + (tr.amount * tr.priceUsd / tr.price)`, but that can get confusing.

    // 10) Update cumulative volume
    const newCumulativeVolumeUsd = token.volume + tradeVolumeUsd;

    // 11) Update the token in the store
    set((storeState) => ({
      tokens: storeState.tokens.map((t) => {
        if (t.address !== address) return t;

        return {
          ...t,
          // We'll display the *latest fill price* as the token's "price":
          price: actualTradePriceSol,
          priceUsd: actualTradePriceUsd,

          // Or if you prefer the bonding-curve price as the "official" price, do:
          // price: bondingCurvePriceSol,
          // priceUsd: bondingCurvePriceUsd,

          marketCap: marketCapUsd,
          liquidity: liquidityUsd,
          volume: newCumulativeVolumeUsd,
          volume24h: volume24hUsd,

          trades: t.trades + 1,
          trades24h: trades24h.length,
          buys24h: trades24h.filter((x) => x.type === 'buy').length,
          sells24h: trades24h.filter((x) => x.type === 'sell').length,

          recentTrades,
          walletCount: new Set([
            ...recentTrades.map((x) => x.buyer),
            ...recentTrades.map((x) => x.seller),
          ]).size,
        };
      }),
    }));
  },

  setConnected: (connected) => set({ isConnected: connected }),

  setSolPrice: (price) => {
    if (price > 0) {
      console.log('[PumpPortal] Updated SOL price:', price);
      set({ solPrice: price });
    }
  },
}));

/* ---------------------------------------------------------------
   Below here, your existing WebSocket init logic remains the same
   except we've renamed 'TOKEN_DECIMALS' or clarified raw usage.
--------------------------------------------------------------- */

let ws: WebSocket | null = null;
let reconnectTimeout: NodeJS.Timeout | null = null;
let reconnectAttempts = 0;
let solPriceInterval: NodeJS.Timeout | null = null;

const API_ENDPOINTS = [
  {
    url: 'https://api.binance.com/api/v3/ticker/price?symbol=SOLUSDT',
    extract: (data: any) => Number(data?.price),
  },
];

const fetchSolanaPrice = async (retries = 3): Promise<number> => {
  const axiosInstance = axios.create({
    timeout: 5000,
    headers: {
      Accept: 'application/json',
      'Content-Type': 'application/json',
    },
  });

  for (const endpoint of API_ENDPOINTS) {
    for (let i = 0; i < retries; i++) {
      try {
        const response = await axiosInstance.get(endpoint.url);
        const price = endpoint.extract(response.data);

        if (typeof price === 'number' && price > 0) {
          return price;
        }
        throw new Error('Invalid price response');
      } catch (error: any) {
        console.error(`[PumpPortal] Error fetching SOL price:`, error.message);
        // Exponential backoff on retry
        const delay = Math.min(1000 * Math.pow(2, i), 10000);
        await new Promise((resolve) => setTimeout(resolve, delay));
      }
    }
  }

  console.warn('[PumpPortal] Using fallback SOL price of 100 after all attempts failed');
  return 100;
};

export function initializePumpPortalWebSocket() {
  if (typeof window === 'undefined') return;

  const cleanup = () => {
    if (ws) {
      try {
        ws.close();
      } catch (e) {
        console.error('[PumpPortal] Error closing WebSocket:', e);
      }
      ws = null;
    }
    if (solPriceInterval) {
      clearInterval(solPriceInterval);
      solPriceInterval = null;
    }
    if (reconnectTimeout) {
      clearTimeout(reconnectTimeout);
      reconnectTimeout = null;
    }
  };

  cleanup();

  try {
    console.log('[PumpPortal] Initializing WebSocket...');
    ws = new WebSocket(WS_URL);
    const store = usePumpPortalStore.getState();

    // Initialize SOL price updates once the WebSocket connects
    fetchSolanaPrice()
      .then((price) => {
        store.setSolPrice(price);
        solPriceInterval = setInterval(async () => {
          try {
            const updatedPrice = await fetchSolanaPrice();
            store.setSolPrice(updatedPrice);
          } catch (error) {
            console.error('[PumpPortal] Failed to update SOL price:', error);
          }
        }, SOL_PRICE_UPDATE_INTERVAL);
      })
      .catch(console.error);

    ws.onopen = () => {
      console.log('[PumpPortal] WebSocket connected');
      store.setConnected(true);
      reconnectAttempts = 0;
    };

    ws.onmessage = async (event) => {
      try {
        const { type, data } = JSON.parse(event.data);
        console.log('[PumpPortal] Received message:', type, data);

        switch (type) {
          case 'newToken': {
            const token = mapPumpPortalData(data);
            store.addToken(token);

            if (token.imageLink) {
              preloadTokenImages([
                { imageLink: token.imageLink, symbol: token.symbol },
              ]);
            }

            // Subscribe to subsequent trades for that token
            ws?.send(
              JSON.stringify({
                method: 'subscribeTokenTrade',
                keys: [token.address],
              })
            );
            break;
          }
          case 'trade':
            // Insert the new trade event into store
            store.addTradeToHistory(data.mint, data);
            break;
          default:
            console.warn('[PumpPortal] Unknown message type:', type);
        }
      } catch (error) {
        console.error('[PumpPortal] Failed to parse message:', error);
      }
    };

    ws.onclose = () => {
      console.log('[PumpPortal] WebSocket disconnected');
      store.setConnected(false);
      cleanup();

      if (reconnectAttempts < MAX_RECONNECT_ATTEMPTS) {
        reconnectAttempts++;
        console.log(
          `[PumpPortal] Attempting reconnect ${reconnectAttempts}/${MAX_RECONNECT_ATTEMPTS}`
        );
        reconnectTimeout = setTimeout(
          initializePumpPortalWebSocket,
          RECONNECT_DELAY * Math.pow(1.5, reconnectAttempts)
        );
      }
    };

    ws.onerror = (error) => {
      console.error('[PumpPortal] WebSocket error:', error);
      store.setConnected(false);
    };

    // Cleanup on page unload
    window.addEventListener('beforeunload', cleanup);
  } catch (error) {
    console.error('[PumpPortal] Failed to initialize WebSocket:', error);
    const store = usePumpPortalStore.getState();
    store.setConnected(false);

    if (reconnectAttempts < MAX_RECONNECT_ATTEMPTS) {
      reconnectAttempts++;
      reconnectTimeout = setTimeout(
        initializePumpPortalWebSocket,
        RECONNECT_DELAY * Math.pow(1.5, reconnectAttempts)
      );
    }
  }
}

/**
 * Create an initial PumpPortalToken from a "newToken" message.
 * We also handle decimal conversion for vTokens if needed.
 */
export function mapPumpPortalData(data: any): PumpPortalToken {
  const {
    mint,
    vSolInBondingCurve,
    marketCapSol,
    name,
    symbol,
    solAmount,
    traderPublicKey,
    imageLink,
    vTokensInBondingCurve,
  } = data;

  const storeState = usePumpPortalStore.getState();
  const solPrice = storeState.solPrice || 0;

  // Convert the bonding curve data into decimal form
  const realVTokens = Number(vTokensInBondingCurve || 0) / 10 ** TOKEN_DECIMALS;
  const realVSol = Number(vSolInBondingCurve || 0);

  // Bonding curve ratio => price in SOL
  const priceSol = realVTokens > 0 ? realVSol / realVTokens : 0;
  const priceUsd = priceSol * solPrice;

  // Market cap & liquidity in USD
  const mcSol = Number(marketCapSol || 0);
  const marketCapUsd = mcSol * solPrice;
  const liquidityUsd = realVSol * solPrice;

  // If solAmount is in SOL, volume in USD:
  const volumeUsd = Number(solAmount || 0) * solPrice;

  console.log('[mapPumpPortalData] new token creation:', {
    symbol,
    priceSol,
    priceUsd,
    marketCapUsd,
    liquidityUsd,
    volumeUsd,
  });

  const now = Date.now();

  return {
    symbol: symbol || mint?.slice(0, 6) || 'Unknown',
    name: name || `Token ${mint?.slice(0, 8)}`,
    address: mint || '',

    // We store the "initial" price from the bonding curve
    price: priceSol,
    priceUsd: priceUsd,
    marketCap: marketCapUsd,
    liquidity: liquidityUsd,
    volume: volumeUsd,
    volume24h: volumeUsd,

    trades: 1,
    trades24h: 1,
    buys24h: 1,
    sells24h: 0,

    walletCount: 1,
    recentTrades: [
      {
        signature: '',
        timestamp: now,
        price: priceSol,
        priceUsd: priceUsd,
        amount: Number(solAmount || 0), // SOL
        type: 'buy',
        buyer: traderPublicKey || '',
        seller: '',
      },
    ],
    imageLink: imageLink || 'https://via.placeholder.com/150',
  };
}

// Initialize WebSocket
initializePumpPortalWebSocket();
